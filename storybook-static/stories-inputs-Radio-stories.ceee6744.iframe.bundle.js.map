{"version":3,"file":"stories-inputs-Radio-stories.ceee6744.iframe.bundle.js","mappings":";;AAKA;AA+EA;AACA;AACA;AACA;;AAEA;;;;;;;;AAQA;;;;;;;AAOA;;;AAGA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;AAeA;;;;;AAKA;;;AAGA;;AAEA;AACA;;AAEA;;;;AAIA;;AAEA;;;;;;;;;AASA;;;;;;;;;;;;AAYA;;;;;;AAMA;AACA;;;AAGA;;;;;AAKA;;;;;AAKA;AACA;AACA;;;;;AAKA;AACA;AACA;;AAEA;;;;;;;;;;;AAWA;;AAEA;;;;AAIA;AAEA;;;AC/DA;;;AAyCA;AACA;AACA;;AAEA;;;;;;;;AAQA;;;;;AAKA;;;;AAIA;;;AAGA;;;;AAIA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;AAGA","sources":["webpack://@teatak/ui/./src/components/Radio/Radio.styled.tsx","webpack://@teatak/ui/./src/stories/inputs/Radio.stories.tsx"],"sourcesContent":["import styled, { css } from 'styled-components'\nimport { RadioOptionsProps } from './Radio.types'\nimport theme, { mergeStyleOverrides, ColorTone, ColorVariant } from '@/style'\n\nexport const StyledRadio = styled.label<{ $options: RadioOptionsProps }>`\n    ${props => {\n        const options = props.$options\n        const { prefixClass: _, variant, outlined, color, size, shape } = options\n\n        let baseSize = 8\n        let textFontSize = 14\n        let iconFontSize = 12\n        //按照尺寸定义变量\n        switch (size) {\n            case 'xs':\n                baseSize = 6\n                textFontSize = 11\n                iconFontSize = baseSize * 2\n                break\n            case 'sm':\n                baseSize = 7\n                textFontSize = 12\n                iconFontSize = baseSize * 2\n                break\n            case 'md':\n                baseSize = 8\n                textFontSize = 14\n                iconFontSize = baseSize * 2\n                break\n            case 'lg':\n                baseSize = 9\n                textFontSize = 14\n                iconFontSize = baseSize * 2\n                break\n            case 'xl':\n                baseSize = 10\n                textFontSize = 16\n                iconFontSize = baseSize * 2\n                break\n        }\n\n        let palette = theme.vars.palette[color!] as ColorTone & ColorVariant\n        if (palette === undefined) {\n            palette = theme.vars.palette.primary\n        }\n        let outlineColor = color === 'neutral' ? theme.vars.palette.primary.main : palette.main\n        let borderColor = outlined ?\n            variant === 'filled' ? palette.dark : palette.container\n            : 'transparent'\n\n        let foreColor, background, backgroundRipple,\n            hoverOpacity, activeOpacity, foreColorChecked, backgroundChecked\n\n        foreColor = theme.vars.palette.surface.onDark\n\n        switch (variant) {\n            case 'filled':\n                background = palette.main\n                backgroundRipple = palette.onContainer\n                hoverOpacity = 0.2\n                activeOpacity = 0.3\n                backgroundChecked = palette.main\n                foreColorChecked = palette.onMain\n                break\n            case 'tonal':\n                background = palette.light\n                backgroundRipple = palette.main\n                hoverOpacity = 0.1\n                activeOpacity = 0.2\n                backgroundChecked = palette.container\n                foreColorChecked = palette.onContainer\n                break\n            case 'text':\n            default:\n                background = \"none\"\n                backgroundRipple = palette.main\n                hoverOpacity = 0.1\n                activeOpacity = 0.2\n                backgroundChecked = palette.light\n                foreColorChecked = palette.onLight\n                break\n        }\n\n        return css`\n            --Radio-baseSize: ${baseSize};\n            --Icon-fontSize: ${iconFontSize};\n            --Text-fontSize: ${textFontSize};\n            font-family: var(--Radio-fontFamily, ${theme.vars.fontFamily.body});\n            font-size: calc(var(--Text-fontSize) * 1px);\n            line-height: ${theme.vars.lineHeight.md};\n            margin-inline-start: var(--Radio-marginInlineStart);\n            margin-inline-end: var(--Radio-marginInlineEnd);\n            box-sizing: border-box;\n            position: relative;\n            display: inline-flex;\n            vertical-align: middle;\n            align-items: center;\n            color: ${foreColor};\n            transition: \n                opacity 150ms ease 0ms, \n                border-color 150ms ease 0ms, \n                background-color ease 0ms, \n                outline 150ms ease 0ms,\n                box-shadow 150ms ease 0ms;\n            & .${_}-action{\n                position: absolute;\n                inset: 0;\n                & .${_}-element {\n                    cursor: pointer;\n                    position: absolute;\n                    margin: 0;\n                    outline: 0;\n                    opacity: 0; \n                    width: 100%;\n                    height: 100%;\n                    &:disabled {\n                        cursor: default;\n                    }\n                } \n            }\n            & svg {\n                user-select: none;\n                width: 1em;\n                height: 1em;\n                fill: currentColor;\n                font-size: calc(var(--Icon-fontSize) * 1px);\n            }\n            & .${_} {\n                position: relative;\n                cursor: pointer;\n                width: var(--Radio-minWidth, calc(var(--Radio-baseSize) * 4px));\n                height: var(--Radio-minHeight, calc(var(--Radio-baseSize) * 4px));\n                border-radius: calc(var(--Radio-baseSize) * 2px);\n                display: inline-flex;\n                justify-content: center;\n                align-items: center;\n                flex-shrink: 0;\n                &::before {\n                    content: \"\";     \n                    position: absolute;      \n                    border-radius: inherit; \n                    pointer-events: none;\n                    background: ${backgroundRipple};\n                    inset: 0;\n                    opacity: 0;            \n                    transition: opacity 150ms ease 0ms; \n                }\n                & .${_}-inner {\n                    width: var(--Radio-inner-minWidth, calc(var(--Radio-baseSize) * 2px + 2px));\n                    height: var(--Radio-inner-minHeight, calc(var(--Radio-baseSize) * 2px + 2px));\n                    ${shape === 'round' ? css`\n                        border-radius: var(--Radio-radius, calc(var(--Radio-baseSize) * 2px));\n                    `: css`\n                        border-radius: var(--Radio-radius, ${theme.vars.radius.sm});\n                    `}\n                        background: var(--Radio-background, ${background}); \n                    box-sizing: border-box;\n                    border-width: 2px;\n                    border-style: solid;\n                    border-color: var(--Radio-borderColor, ${borderColor});\n                    outline-offset: var(--Radio-outlineOffset, 1px);\n                    outline-color: ${outlineColor};\n                    outline-width: 0px;\n                    outline-style: solid;\n                    display: flex;\n                    transition: \n                        opacity 150ms ease 0ms,\n                        background-color 150ms ease 0ms,\n                        outline-width 250ms cubic-bezier(0, 0, 0, 3) 0ms;\n                    & svg {\n                        fill: ${foreColorChecked};\n                        z-index: 1;\n                        width: 100%;\n                        height: 100%;\n                        overflow: visible;\n                        border-radius: 0;\n                        opacity: 0;\n                        transform: scale(0.6);\n                    }\n                }\n                \n            }\n            & .${_}-text {\n                user-select: none;\n                display: inline-flex;\n                justify-content: center;\n                align-items: center;\n            }\n            &:has(\\.${_}-element:not(:disabled)) {\n                & .${_}  {\n                    &:hover {\n                        &::before {\n                            opacity: ${hoverOpacity};\n                        }\n                    }\n                    &:active, &.clicked {\n                        &::before {\n                            opacity: ${activeOpacity};\n                        }\n                    }\n                }\n            }\n            &:has(\\.${_}-element:focus-visible) {\n                & .${_} {\n                    & .${_}-inner  {\n                        outline-width: 2px;\n                    }\n                }\n            }\n            &:has(\\.${_}-element:checked) {\n                & .${_} {\n                    & .${_}-inner {\n                        border-color: transparent;\n                        background: ${backgroundChecked};\n                        & svg {\n                            opacity: 1;\n                            transform: scale(1);\n                            transition: \n                                opacity 150ms ease 0ms,\n                                transform 150ms cubic-bezier(0.3, 0, 0.8, 0.15) 0ms;\n                        }\n                    }\n                }\n            }\n            &:has(\\.${_}-element:disabled) {\n                opacity: .5;\n                & .${_} {\n                    cursor: default;\n                }\n            }\n        `\n    }}\n     ${props => {\n        return mergeStyleOverrides('TuiRadio', props.$options)\n    }}\n`\n","import React from 'react'\nimport type { Meta, StoryObj } from '@storybook/react'\nimport { Radio, ControlGroup, Grid } from '@/components'\nimport { css } from 'styled-components'\nimport theme from '@/style'\nimport { CheckCircle } from '@teatak/icons'\nconst meta = {\n  title: 'Inputs/Radio',\n  component: Radio,\n} satisfies Meta<typeof Radio>\n\nexport default meta\ntype Story = StoryObj<typeof meta>\n\nexport const Overview: Story = {\n  args: {\n    children: \"Hello World\",\n    size: 'md',\n    outlined: false,\n    disabled: false,\n  },\n}\n\nexport const Variants: Story = {\n  args: {\n    size: 'md',\n    disabled: false,\n    outlined: false,\n  },\n  decorators: [\n    (Story, component) => {\n      return <Grid spacing={4}>\n        <Radio\n          {...component.args}\n        >Undefined</Radio>\n        <Radio\n          {...component.args}\n          variant='text'\n        >Text</Radio>\n        <Radio\n          {...component.args}\n          variant='tonal'\n        >Tonal</Radio>\n        <Radio\n          {...component.args}\n          variant='filled'\n        >Filled</Radio>\n      </Grid>\n    },\n  ],\n}\n\nexport const Size: Story = {\n  args: {\n    disabled: false,\n    outlined: false,\n  },\n  decorators: [\n    (Story, component) => {\n      return <Grid spacing={4} alignItems='center'>\n        <Radio\n          {...component.args}\n          size='xs'\n        >xs</Radio>\n        <Radio\n          {...component.args}\n          size='sm'\n        >sm</Radio>\n        <Radio\n          {...component.args}\n          size='md'\n        >md</Radio>\n        <Radio\n          {...component.args}\n          size='lg'\n        >lg</Radio>\n        <Radio\n          {...component.args}\n          size='xl'\n        >xl</Radio>\n      </Grid>\n    },\n  ],\n}\n\nexport const Colors: Story = {\n  args: {\n    disabled: false,\n    outlined: false,\n  },\n  decorators: [\n    (Story, component) => {\n      return <Grid spacing={4}>\n        <Radio\n          {...component.args}\n          color='primary'\n        >primary</Radio>\n        <Radio\n          {...component.args}\n          color='neutral'\n        >neutral</Radio>\n        <Radio\n          {...component.args}\n          color='success'\n        >success</Radio>\n        <Radio\n          {...component.args}\n          color='warning'\n        >warning</Radio>\n        <Radio\n          {...component.args}\n          color='danger'\n        >danger</Radio>\n      </Grid>\n    },\n  ],\n}\n\n\nconst options = [\n  {\n    label: \"Admin\",\n    value: \"admin\",\n  },\n  {\n    label: \"Dev\",\n    value: \"dev\",\n  },\n  {\n    label: \"Tester\",\n    value: \"tester\",\n  },\n  {\n    label: \"Master\",\n    value: \"master\",\n    disabled: true,\n  },\n]\n\n\nexport const Groups: Story = {\n  args: {\n    variant: \"tonal\",\n    color: \"warning\",\n    children: \"Warning\",\n    size: 'md',\n    outlined: true,\n  },\n  decorators: [\n    (Story, component) => {\n      return <ControlGroup\n        options={options}\n        defaultValue={'master'}\n        onChange={(value) => {\n          console.log(value)\n        }}\n        render={(options) => {\n          return <Grid spacing={4}>\n            {options.map((option, i) => {\n              const { selected, label, ...rest } = option\n              return <Radio\n                checked={selected}\n                {...component.args}\n                {...rest}\n                styleOverrides={(props) => {\n                  return css`\n                    \n                  `\n                }}\n              >{label}</Radio>\n            })}\n          </Grid>\n        }}\n      />\n    },\n  ],\n};\n\nexport const CustomGroups: Story = {\n  args: {\n    size: 'md',\n    color: 'success',\n  },\n  decorators: [\n    (Story, component) => {\n      return <ControlGroup\n        options={options}\n        defaultValue={'master'}\n        onChange={(value) => {\n          console.log(value)\n        }}\n        render={(options) => {\n          return <Grid spacing={8} direction='column'>\n            {options.map((option, i) => {\n              const { selected, label, ...rest } = option\n              return <Radio\n                icon={<CheckCircle />}\n                checked={selected}\n                {...component.args}\n                {...rest}\n                styleOverrides={(props) => {\n                  const { prefixClass: _, color } = props\n                  let palette = theme.vars.palette[color!]\n                  if (palette === undefined) {\n                    palette = theme.vars.palette.primary\n                  }\n                  const surface = theme.vars.palette.surface.main\n                  return css`\n                    height: 60px;\n                    width: 200px;\n                    border: solid 1px ${surface};\n                    border-radius: ${theme.vars.radius.md};\n                    box-shadow: ${theme.vars.shadow.sm};\n                    cursor: pointer;\n                    & .${_} {\n                      position: absolute;\n                      right: calc(var(--Radio-baseSize) * -2px + 2px);\n                      top: calc(var(--Radio-baseSize) * -2px + 2px);\n                      z-index: 1;\n                      &::before {\n                        display: none;\n                      }\n                      & .${_}-inner {\n                        outline: none;\n                        border-width: 0px;\n                        background: none;\n                        & svg {\n                          fill: ${palette.main};\n                        }\n                      }\n                    }\n                    & .${_}-action {\n                      inset: -1px;\n                    }\n                    &:has(\\.${_}-element:focus-visible) {\n                      outline-style: solid;\n                      outline-offset: 2px;\n                      outline-width: 2px;\n                      outline-color: ${palette.main};\n                    }\n                    &:has(\\.${_}-element:checked) {\n                      .${_} .${_}-inner { \n                        background: ${theme.vars.palette.surface.body};\n                      }\n                      .${_}-action {\n                        border-radius: inherit;\n                        border: solid 2px ${palette.main};\n                      }\n                    }\n                  `\n                }}\n              ><div style={{ position: \"absolute\", inset: 0, padding: \"8px\" }}>{label}</div></Radio>\n            })}\n          </Grid>\n        }}\n      />\n    },\n  ],\n};\n\n"],"names":[],"sourceRoot":""}