{"version":3,"file":"stories-display-Chip-stories.2a7121bc.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAkBA;;;;;;;;AAUA;AACA;;;AAGA;;AAIA;AC/BA;AA2EA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;;;;;;;;;;AAWA;AACA;;;;;;;;;;AAUA;;;;;;;;;;;;AAYA;;;;;;;AAOA;;;AAGA;;;AAGA;;;;;;;;;;AAUA;;;;;;;;AAQA;;;;;AAKA;;;AAGA;;;;AAIA;;;AAGA;;;;;AAKA;;;AAGA;AACA;;;;;AAKA;;;;;;;;AAQA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;AAeA;;;;;;;;;AASA;;;;;;AAMA;;;;AAIA;AAEA;AAKA;AACA;AAKA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;AAUA;;;AAGA;;AAEA;;;;AAIA;AAEA","sources":["webpack://@teatak/ui/./src/icons/custom/Loading/Loading.tsx","webpack://@teatak/ui/./src/components/Chip/Chip.styled.tsx"],"sourcesContent":["import React from 'react';\nimport classnames from \"classnames\"\nimport styled, { keyframes } from 'styled-components'\n\nconst dasharray = keyframes`\n    0% {\n        stroke-dasharray: 1px, 200px;\n        stroke-dashoffset: 0;\n    }\n    50% {\n        stroke-dasharray: 100px, 200px;\n        stroke-dashoffset: -15px;\n    }\n    100% {\n        stroke-dasharray: 100px, 200px;\n        stroke-dashoffset: -125px;\n    }\n`\nconst rotate = keyframes`\n    0% {\n        transform: rotate(0deg);\n    }\n\n    100% {\n        transform: rotate(360deg);\n    }\n`\n\nconst Svg = styled.svg`\n    animation: 1.4s linear 0s infinite normal none running ${rotate};\n    & circle {\n        stroke: currentColor;\n        animation: 1.4s ease-in-out 0s infinite normal none running ${dasharray};\n    }\n`\n\nconst Loading = (props: any) => {\n    const { className, ...rest } = props;\n    const classNames = classnames(\n        'tui-icon-loading',\n        className,\n    );\n    return <Svg className={classNames} viewBox=\"0 0 44 44\" {...rest} >\n        <circle cx='22' cy='22' r='20' fill='none' strokeWidth='4' strokeLinecap='round'></circle>\n    </Svg>\n}\nexport default Loading","import styled, { css } from 'styled-components'\nimport { ChipOptionsProps, ChipDeleteOptionsProps } from './Chip.types'\nimport theme, { mergeStyleOverrides, ColorTone, ColorVariant } from '@/style'\n\nexport const StyledChip = styled.div<{ $options: ChipOptionsProps }>`\n    ${props => {\n        const options = props.$options\n        const { prefixClass: _, variant, color, outlined, elevation = [0, 0, 0], size, shape, icon } = options\n\n        let baseSize = 8\n        let textFontSize = 14\n        let iconFontSize = 12\n        //按照尺寸定义变量\n        switch (size) {\n            case 'xs':\n                baseSize = 4\n                textFontSize = 11\n                iconFontSize = baseSize * 2\n                break\n            case 'sm':\n                baseSize = 5\n                textFontSize = 12\n                iconFontSize = baseSize * 2\n                break\n            case 'md':\n                baseSize = 6\n                textFontSize = 14\n                iconFontSize = baseSize * 2\n                break\n            case 'lg':\n                baseSize = 7\n                textFontSize = 14\n                iconFontSize = baseSize * 2\n                break\n            case 'xl':\n                baseSize = 8\n                textFontSize = 16\n                iconFontSize = baseSize * 2\n                break\n        }\n\n        let palette = theme.vars.palette[color!] as ColorTone & ColorVariant\n        if (palette === undefined) {\n            palette = theme.vars.palette.primary\n        }\n        let outlineColor = color === 'neutral' ? theme.vars.palette.primary.main : palette.main\n        let borderColor = outlined ? variant === 'filled' ?\n            color === 'neutral' ?\n                theme.vars.palette.primary.dark : palette.dark :\n            color === 'neutral' ?\n                theme.vars.palette.primary.main : palette.main : 'transparent'\n\n        let foreColor, background, backgroundRipple, hoverOpacity, activeOpacity\n\n        switch (variant) {\n            case 'filled':\n                foreColor = palette.onMain\n                background = palette.main\n                backgroundRipple = theme.vars.palette.common.black\n                hoverOpacity = 0.2\n                activeOpacity = 0.3\n                break\n            case 'tonal':\n                foreColor = palette.onContainer\n                background = palette.container\n                backgroundRipple = palette.main\n                hoverOpacity = 0.1\n                activeOpacity = 0.2\n                break\n            case 'text':\n            default:\n                foreColor = palette.onContainer\n                background = 'none'\n                backgroundRipple = palette.main\n                hoverOpacity = 0.1\n                activeOpacity = 0.2\n                break\n        }\n\n        return css`\n            --Chip-baseSize: ${baseSize};\n            --Chip-elevationLevel: ${elevation[0]};\n            --Icon-fontSize: ${iconFontSize};\n            --Text-fontSize: ${textFontSize};\n            --Chip-outlineColor: ${outlineColor};\n            --ChipDelete-size: calc(var(--Chip-minHeight, calc(var(--Chip-baseSize) * 4px)) - 4px);\n            --ChipDelete-offset: calc(var(--Chip-baseSize) * 1px - 2px);\n            --ChipDelete-ripple: ${backgroundRipple};\n            --ChipDelete-outlineColor: ${outlineColor};\n\n            ${shape === 'round' ? css`\n                --ChipDelete-radius: calc((var(--Chip-baseSize) - 1) * 2px);\n            `: css`\n                --ChipDelete-radius: calc(var(--Chip-radius, ${theme.vars.radius.sm}) - 2px);\n            `}\n            font-family: var(--Chip-fontFamily, ${theme.vars.fontFamily.body});\n            font-size: calc(var(--Text-fontSize) * 1px);\n            line-height: ${theme.vars.lineHeight.md};\n            min-height: var(--Chip-minHeight, calc(var(--Chip-baseSize) * 4px));\n            margin-inline-start: var(--Chip-marginInlineStart);\n            margin-inline-end: var(--Chip-marginInlineEnd);\n            padding-inline: calc(var(--Chip-baseSize) * 1px);\n            box-sizing: border-box;\n            position: relative;\n            display: inline-flex;\n            vertical-align: middle;\n            justify-content: center;\n            align-items: center;\n            color: var(--Chip-color, ${foreColor});\n            background:  var(--Chip-background, ${background});\n\n            box-shadow: \n                0px calc(1px*(clamp(0,var(--Chip-elevationLevel),1) + clamp(0,var(--Chip-elevationLevel) - 3,1) + 2*clamp(0,var(--Chip-elevationLevel) - 4,1))) calc(1px*(2*clamp(0,var(--Chip-elevationLevel),1) + clamp(0,var(--Chip-elevationLevel) - 2,1) + clamp(0,var(--Chip-elevationLevel) - 4,1))) 0px var(--Chip-shadowColor, rgba(0, 0, 0, 0.2)),\n                0px calc(1px*(clamp(0,var(--Chip-elevationLevel),1) + clamp(0,var(--Chip-elevationLevel) - 1,1) + 2*clamp(0,var(--Chip-elevationLevel) - 2,3))) calc(1px*(3*clamp(0,var(--Chip-elevationLevel),2) + 2*clamp(0,var(--Chip-elevationLevel) - 2,3))) calc(1px*(clamp(0,var(--Chip-elevationLevel),4) + 2*clamp(0,var(--Chip-elevationLevel) - 4,1))) var(--Chip-shadowColor, rgba(0, 0, 0, 0.12));\n            transition: \n                width 150ms ease 0ms, \n                height 150ms ease 0ms, \n                box-shadow 150ms ease 0ms;\n\n            & .${_}-element {\n                position: absolute;\n                inset: 0;\n                border: 0;\n                padding: inherit;\n                margin: inherit;\n                cursor: pointer;\n                text-decoration: none;\n                border-radius: inherit;\n                opacity: 0;\n                z-index: 0;\n                outline: 0;\n                background: ${backgroundRipple};\n                transition: opacity 150ms ease 0ms;\n                &:disabled {\n                    cursor: default;\n                }\n                &:not(:disabled) {\n                    &:hover {\n                        opacity: ${hoverOpacity};\n                    }\n                    &:active {\n                        opacity: ${activeOpacity};\n                    }\n                    .clicked& {\n                        opacity: ${activeOpacity};\n                    }\n                }\n            }\n            & svg {\n                width: 1em;\n                height: 1em;\n                fill: currentColor;\n                font-size: calc(var(--Icon-fontSize) * 1px);\n            }\n            & .${_}-span {\n                display: flex;\n                position: relative;\n                justify-content: center;\n                align-items: center;\n                pointer-events: none;\n                margin-inline: calc(var(--Chip-baseSize) * 1px);\n            }\n            & .${_}-start-decorator, & .${_}-end-decorator {\n                z-index: 1;\n                position: relative;\n                display: inline-flex;\n                align-items: center;\n                &.${_}-in-enter {\n                    width: 0;\n                }\n                &.${_}-in-enter-active  {\n                    width: calc(var(--Icon-fontSize) * 1px);\n                    transition: width 150ms ease 0ms;\n                }\n                &.${_}-in-exit {\n                    width: calc(var(--Icon-fontSize) * 1px);\n                }\n                &.${_}-in-exit-active {\n                    width: 0;\n                    transition: width 150ms ease 0ms;\n                }\n            }\n            &.${_}-loading {\n                opacity: 0.7;\n                cursor: default;\n                & .${_}-span {\n                    & .${_}-span-text {\n                        display: inline-flex;\n                        line-height: 1;\n                        color: transparent;\n                    }\n                    & .${_}-span-loading {\n                        display: inline-flex;\n                        position: absolute;\n                        left: 50%;\n                        transform: translate(-50%);\n                    }\n                }\n            }\n            ${shape === 'round' ? css`\n                border-radius: var(--Chip-radius, calc(var(--Chip-baseSize) * 2px));\n            `: css`\n                border-radius: var(--Chip-radius, ${theme.vars.radius.sm});\n            `}\n            ${icon && css`\n                & .${_}-span {\n                    display: flex;\n                    overflow: hidden;\n                    text-overflow: ellipsis;\n                    margin: 0;\n                }                \n            `}\n            &::after {\n                content: \"\";\n                position: absolute;\n                pointer-events: none;\n                border-radius: inherit;\n                inset: 0;\n                border-width: 1px;\n                border-style: solid;\n                border-color: var(--Chip-borderColor, ${borderColor});\n                outline-offset: var(--Chip-outlineOffset, 1px);\n                outline-color: var(--Chip-outlineColor);\n                outline-width: 0px;\n                outline-style: solid;\n                transition: \n                    opacity 150ms ease 0ms,\n                    outline-width 250ms cubic-bezier(0, 0, 0, 3) 0ms;\n            }\n            &:has(\\.${_}-element:focus-visible) {\n                &::after {\n                    z-index: 1;\n                    outline-width: 2px;\n                }\n            }\n            &.${_}-disabled, &:has(\\.${_}-element:disabled) {\n                opacity: 0.5;\n                cursor: default;\n            }\n        `\n    }}\n    ${props => {\n        return mergeStyleOverrides('TuiChip', props.$options)\n    }}\n`\n\nexport const StyledChipDelete = styled.span<{ $options: ChipDeleteOptionsProps }>`\n    ${props => {\n        const options = props.$options\n        const { prefixClass: _, color } = options\n        let palette = theme.vars.palette[color!] as ColorTone & ColorVariant\n        return css`\n            ${palette && css`\n                --ChipDelete-ripple: ${palette.main};\n                --ChipDelete-outlineColor: ${palette.main};\n                color: var(--ChipDelete-color, ${palette.main});\n            `}\n            display: inline-flex;\n            justify-content: center;\n            align-items: center;\n            position: relative;\n            border-radius: var(--ChipDelete-radius, 50%);\n            min-height: var(--ChipDelete-size,1em);\n            min-width: var(--ChipDelete-size,1em);\n            margin-inline: calc(var(--ChipDelete-offset) * -1); \n            outline-offset: var(--ChipDelete-outlineOffset, 1px);\n            outline-color: var(--ChipDelete-outlineColor);\n            outline-width: 0px;\n            outline-style: solid;\n            text-overflow: ellipsis;\n            transition: \n                opacity 150ms ease 0ms,\n                outline-width 250ms cubic-bezier(0, 0, 0, 3) 0ms;\n\n            & .${_}-element {\n                position: absolute;\n                cursor: pointer;\n                inset: 0;\n                margin: 0;\n                padding: 0;\n                border: 0;\n                outline: 0;\n                opacity: 0;\n                background: var(--ChipDelete-ripple, #000);\n                border-radius: inherit;\n                width: 100%;\n                height: 100%;\n                &:not(:disabled) {\n                    &:hover {\n                        opacity: 0.35;\n                    }\n                    &:active {\n                        opacity: 0.5;\n                    }\n                    .clicked& {\n                        opacity: 0.5;\n                    }\n                }\n            }\n            & .${_}-span { \n                z-index: 1;\n                display: flex;\n                position: relative;\n                justify-content: center;\n                align-items: center;\n                pointer-events: none;\n                overflow: hidden;\n                text-overflow: ellipsis;\n            }\n            &:has(\\.${_}-element:focus-visible) {\n                outline-width: 2px;\n            }\n            &.${_}-disabled, &:has(\\.${_}-element:disabled) {\n                opacity: 0.5;\n                & .${_}-element { \n                    cursor: default;\n                }\n            }\n        `\n    }}\n    ${props => {\n        return mergeStyleOverrides('TuiChipDelete', props.$options)\n    }}\n`"],"names":[],"sourceRoot":""}