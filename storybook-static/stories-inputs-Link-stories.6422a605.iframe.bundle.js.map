{"version":3,"file":"stories-inputs-Link-stories.6422a605.iframe.bundle.js","mappings":";;AAcA;AA2CA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;;AAEA;;;;;AAKA;;;;;;AAMA;;;;;AAKA;AAEA;AAKA","sources":["webpack://@teatak/ui/./src/components/Link/Link.tsx"],"sourcesContent":["import React, { forwardRef, useContext } from 'react'\nimport classnames from 'classnames'\nimport styled, { css } from 'styled-components'\nimport theme, { mergeStyleOverrides, ColorTone, ColorVariant } from '@/style'\nimport { LinkProps, LinkOptionsProps } from './Link.types'\nimport { ControlContext } from '../Control';\nimport { mergeProps } from '@/helper/common';\n\nconst StyledComponent = (props: any) => {\n    const { component: Component, ...rest } = props\n    return <Component {...rest} />\n}\n\nconst StyledLink = styled(StyledComponent) <{ $options: LinkOptionsProps }>`\n    ${props => {\n        const options = props.$options\n        const { prefixClass: _, color, size } = options\n\n        let baseSize = 8\n        let textFontSize = 14\n        let iconFontSize = 12\n        switch (size) {\n            case 'xs':\n                baseSize = 6\n                textFontSize = 11\n                iconFontSize = baseSize * 2\n                break\n            case 'sm':\n                baseSize = 7\n                textFontSize = 12\n                iconFontSize = baseSize * 2\n                break\n            case 'md':\n                baseSize = 8\n                textFontSize = 14\n                iconFontSize = baseSize * 2\n                break\n            case 'lg':\n                baseSize = 9\n                textFontSize = 14\n                iconFontSize = baseSize * 2\n                break\n            case 'xl':\n                baseSize = 10\n                textFontSize = 16\n                iconFontSize = baseSize * 2\n                break\n        }\n        //按照尺寸定义变量\n        let palette = theme.vars.palette[color!] as ColorTone & ColorVariant\n        if (palette === undefined) {\n            palette = theme.vars.palette.primary\n        }\n\n        const foreColor = palette.main\n        const hoverColor = palette.dark\n        return css`\n            --Link-baseSize: ${baseSize};\n            --Icon-fontSize: ${iconFontSize};\n            --Text-fontSize: ${textFontSize};\n            color: ${foreColor};\n            text-decoration: none;\n            outline-offset:2px;\n            outline-color:${foreColor};\n            outline-width: 0px;\n            outline-style: solid;\n            border-radius: var(--Link-radius, ${theme.vars.radius.sm});\n            font-family: var(--Link-fontFamily, ${theme.vars.fontFamily.body});\n            font-size: calc(var(--Text-fontSize) * 1px);\n            line-height: ${theme.vars.lineHeight.md};\n            transition: \n                opacity 150ms ease 0ms,\n                outline-width 250ms cubic-bezier(0, 0, 0, 3) 0ms;\n         \n            &.${_}-disabled {\n                opacity: 0.5;\n                pointer-events: none;\n                cursor: not-allowed;\n            }\n            &:hover, &:active {\n                color: ${hoverColor};;\n            }\n            &:focus-visible {\n                outline-width: 2px;\n            }\n        `\n    }}\n    ${props => {\n        return mergeStyleOverrides('TuiLink', props.$options)\n    }}\n`\n\nconst Link = forwardRef<HTMLLinkElement, LinkProps>((inProps, ref) => {\n    const ctx = useContext(ControlContext)\n    const props = mergeProps(ctx, inProps, {\n        prefixClass: 'tui-link',\n    }) as LinkProps\n\n    const {\n        prefixClass,\n        className,\n        disabled,\n        onClick,\n        component = 'a',\n        ...rest\n    } = props\n\n    const classNames = classnames(\n        prefixClass,\n        {\n            [`${prefixClass}-disabled`]: disabled,\n        },\n        className,\n    )\n    const handleClick = (e: any) => {\n        if (disabled) {\n            e.preventDefault();\n            e.stopPropagation();\n        } else {\n            onClick && onClick(e);\n        }\n    }\n\n    return <StyledLink\n        component={component}\n        $options={props}\n        className={classNames}\n        onClick={handleClick}\n        {...rest} />\n})\nexport default Link"],"names":[],"sourceRoot":""}