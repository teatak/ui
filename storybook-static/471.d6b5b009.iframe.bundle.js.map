{"version":3,"file":"471.d6b5b009.iframe.bundle.js","mappings":";AAKA;AA8FA;;AAEA;AACA;AACA;;AAEA;;;;;;;;AAQA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;AAMA;;;;;;AAMA;;;;;;AAMA;;;AAGA;;;;AAIA;AACA;;AAEA;AACA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;AAcA;;AAEA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;AAOA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;AAaA;;;;;;AAMA;AACA;;AAEA;AACA;AACA;;;;;AAKA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;;AAEA;;;;;;AAMA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;;;;;;AAMA;;AAEA;;;;AAIA;AAEA","sources":["webpack://@teatak/ui/./src/components/Switch/Switch.styled.tsx"],"sourcesContent":["import styled, { css } from 'styled-components'\nimport { SwitchOptionsProps } from './Switch.types'\nimport theme, { mergeStyleOverrides, ColorTone, ColorVariant } from '@/style'\n\nexport const StyledSwitch = styled.label<{ $options: SwitchOptionsProps }>`\n    ${props => {\n        const options = props.$options\n        const { prefixClass: _, variant, outlined, color, size, shape, thinTrack } = options\n        let baseSize = 8\n        let textFontSize = 14\n        let iconFontSize = 12\n        //按照尺寸定义变量\n        switch (size) {\n            case 'xs':\n                baseSize = 6\n                textFontSize = 11\n                iconFontSize = baseSize * 2 - 2\n                break\n            case 'sm':\n                baseSize = 7\n                textFontSize = 12\n                iconFontSize = baseSize * 2 - 2\n                break\n            case 'md':\n                baseSize = 8\n                textFontSize = 14\n                iconFontSize = baseSize * 2 - 2\n                break\n            case 'lg':\n                baseSize = 9\n                textFontSize = 14\n                iconFontSize = baseSize * 2 - 2\n                break\n            case 'xl':\n                baseSize = 10\n                textFontSize = 16\n                iconFontSize = baseSize * 2 - 2\n                break\n        }\n        let palette = theme.vars.palette[color!] as ColorTone & ColorVariant\n        if (palette === undefined) {\n            palette = theme.vars.palette.primary\n        }\n        let outlineColor = color === 'neutral' ? theme.vars.palette.primary.main : palette.main\n        let borderColor = outlined ?\n            variant === 'filled' ? theme.vars.palette.neutral.dark : theme.vars.palette.neutral.container\n            : 'transparent'\n        let borderColorChecked = outlined ?\n            variant === 'filled' ? palette.dark : palette.main\n            : 'transparent'\n\n        let foreColor, handleBackground, handleForeColor, background, backgroundRipple,\n            hoverOpacity, activeOpacity, handleForeColorChecked, handleBackgroundChecked, backgroundChecked\n\n        foreColor = theme.vars.palette.surface.onDark\n        switch (variant) {\n            case 'filled':\n                handleBackground = theme.vars.palette.common.white\n                handleBackgroundChecked = theme.vars.palette.common.white\n                handleForeColor = palette.main\n                handleForeColorChecked = palette.main\n\n                background = palette.container\n                backgroundChecked = palette.main\n                backgroundRipple = palette.dark\n\n                hoverOpacity = 0.2\n                activeOpacity = 0.3\n                break\n            case 'tonal':\n                handleBackground = palette.dark\n                handleBackgroundChecked = palette.dark\n                handleForeColor = palette.onDark\n                handleForeColorChecked = palette.onDark\n\n                background = palette.light\n                backgroundChecked = palette.container\n                backgroundRipple = palette.main\n\n                hoverOpacity = 0.2\n                activeOpacity = 0.3\n                break\n            case 'text':\n            default:\n                handleBackground = palette.dark\n                handleBackgroundChecked = palette.dark\n                handleForeColor = palette.onDark\n                handleForeColorChecked = palette.onDark\n\n                background = \"none\"\n                backgroundChecked = palette.light\n                backgroundRipple = palette.main\n\n                hoverOpacity = 0.2\n                activeOpacity = 0.3\n                break\n        }\n\n        return css`\n            --Switch-baseSize: ${baseSize};\n            --Switch-gap: calc(var(--Switch-baseSize) * 1px);\n            --Icon-fontSize: ${iconFontSize};\n            --Text-fontSize: ${textFontSize};\n            font-family: var(--Switch-fontFamily, ${theme.vars.fontFamily.body});\n            font-size: calc(var(--Text-fontSize) * 1px);\n            line-height: ${theme.vars.lineHeight.md};\n            margin-inline-start: var(--Switch-marginInlineStart);\n            margin-inline-end: var(--Switch-marginInlineEnd);\n            box-sizing: border-box;\n            position: relative;\n            display: inline-flex;\n            vertical-align: middle;\n            align-items: center;\n            color: ${foreColor};\n            height: var(--Switch-rootHeight, calc(var(--Switch-baseSize) * 4px));\n            gap: var(--Switch-gap);\n            transition: \n                opacity 150ms ease 0ms, \n                border-color 150ms ease 0ms, \n                background-color ease 0ms, \n                outline 150ms ease 0ms,\n                box-shadow 150ms ease 0ms;\n\n            & .${_}-element {\n                cursor: pointer;\n                position: absolute;\n                margin: 0;\n                outline: 0;\n                opacity: 0; \n                width: 100%;\n                height: 100%;\n                &:disabled {\n                    cursor: default;\n                }\n            } \n            & svg {\n                user-select: none;\n                width: 1em;\n                height: 1em;\n                fill: currentColor;\n                font-size: calc(var(--Icon-fontSize) * 1px);\n            }\n            & .${_} {\n                position: relative;\n                cursor: pointer;\n                width: var(--Switch-width, calc(var(--Switch-baseSize) * 5px));\n                height: var(--Switch-height, calc(var(--Switch-baseSize) * 3px));\n                flex-shrink: 0;      \n                & .${_}-track-container {\n                    position: absolute;\n                    display: flex;\n                    align-items: center;  \n                    justify-content: center;\n                    inset: 0;\n                    & .${_}-track {\n                        position: relative;\n                        inset: 0;\n                        display: inline-flex;\n                        justify-content: center;\n                        align-items: center;\n                        ${thinTrack ? css`\n                            width: var(--Switch-trackWidth, calc(var(--Switch-baseSize) * 4px));\n                            height: var(--Switch-trackHeight, calc(var(--Switch-baseSize) * 1.8px));\n                        `: css`\n                            width: var(--Switch-trackWidth, calc(var(--Switch-baseSize) * 5px));\n                            height: var(--Switch-trackHeight, calc(var(--Switch-baseSize) * 3px));\n                        `}\n                        background: var(--Switch-trackBackground, ${background}); \n                        ${shape === 'round' ? css`\n                            border-radius: var(--Switch-radius, calc(var(--Switch-baseSize) / 2 * 3px));\n                        `: css`\n                            border-radius: var(--Switch-radius, ${theme.vars.radius.sm});\n                        `}\n                        transition: \n                            opacity 150ms ease 0ms,\n                            background-color 150ms ease 0ms,\n                            outline-width 250ms cubic-bezier(0, 0, 0, 3) 0ms;\n                        \n                        &::before {\n                            content: \"\";     \n                            position: absolute;       \n                            pointer-events: none;\n                            background: ${backgroundRipple};\n                            inset: 0;\n                            opacity: 0;            \n                            transition: opacity 150ms ease 0ms; \n                            border-radius: inherit;\n                        }\n                        &::after {\n                            content: \"\";     \n                            position: absolute;       \n                            pointer-events: none;\n                            inset: 0;\n                            box-sizing: border-box;\n                            border-width: 1px;\n                            border-style: solid;\n                            border-color: var(--Switch-borderColor, ${borderColor});\n                            outline-offset: var(--Switch-outlineOffset, 1px);\n                            outline-color: ${outlineColor};\n                            outline-width: 0px;\n                            outline-style: solid;\n                            transition: \n                                opacity 150ms ease 0ms,\n                                outline-width 250ms cubic-bezier(0, 0, 0, 3) 0ms;\n                            border-radius: inherit;\n                        }\n                    }  \n                }   \n                & .${_}-handle-container {\n                    position: absolute;\n                    width: var(--Switch-height, calc(var(--Switch-baseSize) * 3px));\n                    height: var(--Switch-height, calc(var(--Switch-baseSize) * 3px));\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    transition: \n                        margin 300ms cubic-bezier(0.175, 0.885, 0.32, 1.275) 0s;\n    \n                    & .${_}-handle {\n                        display: inline-flex;\n                        justify-content: center;\n                        align-items: center;\n                        pointer-events: none;\n                        inset: 0;\n                        box-sizing: border-box;\n                        ${shape === 'round' ? css`\n                            border-radius: var(--Switch-handleRadius, calc(var(--Switch-baseSize) / 2 * 3px));\n                        `: css`\n                            border-radius: calc(var(--Switch-handleRadius, ${theme.vars.radius.sm}) - 2px);\n                        `}\n                        background: ${handleBackground};\n                        color: ${handleForeColor};\n                        outline-offset: 0px;\n                        outline-color: ${outlineColor};\n                        outline-width: 0px;\n                        outline-style: solid;\n                        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.3);\n                        width: var(--Switch-handleSize, calc(var(--Switch-baseSize) * 2px + 2px));\n                        height: var(--Switch-handleSize, calc(var(--Switch-baseSize) * 2px + 2px));\n                        transition: \n                            opacity 150ms ease 0ms,\n                            outline-width 250ms cubic-bezier(0, 0, 0, 3) 0ms;\n                    }                    \n                }\n                \n            }\n            & .${_}-text {\n                user-select: none;\n                display: inline-flex;\n                justify-content: center;\n                align-items: center;\n            }\n            &:has(\\.${_}-element:not(:disabled)) {\n                & .${_}  {\n                    &:hover {\n                        & .${_}-track-container {\n                            & .${_}-track::before {\n                                opacity: ${hoverOpacity};\n                            }\n                        }\n                    }\n                    &:active, &.clicked {\n                        & .${_}-track-container {\n                            & .${_}-track::before {\n                                opacity: ${activeOpacity};\n                            }\n                        }\n                    }\n                }\n            }\n            &:has(\\.${_}-element:focus-visible) {\n                & .${_} {\n                    & .${_}-track-container {\n                        & .${_}-track  {\n                            &::after {\n                                ${!thinTrack && css`\n                                    outline-width: 2px;\n                                `}\n                            }\n                        }\n                    }\n                    & .${_}-handle-container {\n                        & .${_}-handle {\n                            ${thinTrack && css`\n                                outline-width: 2px;\n                            `}\n                        }\n                    }\n                }\n            }\n            &:has(\\.${_}-element:checked) {\n                & .${_} {\n                    & .${_}-track-container {\n                        & .${_}-track {\n                            background: ${backgroundChecked};\n                            &::after {\n                                border-color: ${borderColorChecked};\n                            }\n                        }\n                    }\n                    & .${_}-handle-container {\n                        & .${_}-handle {\n                            background: ${handleBackgroundChecked};\n                            color: ${handleForeColorChecked};\n                        }\n                        margin-inline-start: calc(var(--Switch-width, calc(var(--Switch-baseSize) * 5px)) - var(--Switch-height, calc(var(--Switch-baseSize) * 3px)));\n                    }\n                }\n            }            \n            &:has(\\.${_}-element:disabled) {\n                opacity: .5;\n                & .${_} {\n                    cursor: default;\n                }\n            }\n        `\n    }}\n     ${props => {\n        return mergeStyleOverrides('TuiSwitch', props.$options)\n    }}\n`"],"names":[],"sourceRoot":""}