{"version":3,"file":"625.3b9901e4.iframe.bundle.js","mappings":";AAKA;AA4EA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;;;;;;;AAOA;;AAEA;;AAEA;AACA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;AAYA;;AAEA;;;;;;;;;;;;;;AAcA;;AAEA;;;;;;;AAOA;AACA;AACA;;;;;;;;;AASA;;;AAGA;;;;;AAKA;;;;;;;;;;;;;;;AAeA;;;;;;AAMA;;;;AAIA;;;;;AAKA;;;AAGA;;;AAGA;AACA;;;;AAIA;AACA;;;;AAIA;;;;;;AAMA;;;AAGA;AACA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;AAIA;;;;;;;AAOA;;;;AAIA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;AAIA;;;;;;;AAOA;;;;AAIA;;;;;;;;AAQA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AAEA","sources":["webpack://@teatak/ui/./src/components/Input/Input.styled.tsx"],"sourcesContent":["import styled, { css } from 'styled-components'\nimport { InputOptionsProps } from './Input.types'\nimport theme, { mergeStyleOverrides, ColorTone, ColorVariant } from '@/style'\n\nexport const StyledInputRoot = styled.div<{ $options: InputOptionsProps }>`\n    ${(props) => {\n        const options = props.$options\n        const { prefixClass: _, shape, size, elevation = [0, 0, 0], variant, color, outlined } = options\n        let baseSize = 8\n        let textFontSize = 14\n        let iconFontSize = 12\n        //按照尺寸定义变量\n        switch (size) {\n            case 'xs':\n                baseSize = 6\n                textFontSize = 11\n                iconFontSize = baseSize * 2\n                break\n            case 'sm':\n                baseSize = 7\n                textFontSize = 12\n                iconFontSize = baseSize * 2\n                break\n            case 'md':\n                baseSize = 8\n                textFontSize = 14\n                iconFontSize = baseSize * 2\n                break\n            case 'lg':\n                baseSize = 9\n                textFontSize = 14\n                iconFontSize = baseSize * 2\n                break\n            case 'xl':\n                baseSize = 10\n                textFontSize = 16\n                iconFontSize = baseSize * 2\n                break\n        }\n\n        const dot_ = '.' + _\n        let palette = theme.vars.palette[color!] as ColorTone & ColorVariant\n        if (palette === undefined) {\n            palette = theme.vars.palette.primary\n        }\n        let outlineColor = color === 'neutral' ? theme.vars.palette.primary.main : palette.main\n        let borderColor = outlined ? variant === 'filled' ?\n            color === 'neutral' ?\n                theme.vars.palette.primary.dark : palette.dark :\n            color === 'neutral' ?\n                theme.vars.palette.primary.main : palette.main : 'transparent'\n\n        const colorRewrite = variant === 'filled' ? palette[5] : palette[90]\n\n        let foreColor, background, backgroundRipple, backgroundFocus, foreColorDisabled, backgroundDisabled, borderColorDisabled\n        switch (variant) {\n            case 'filled':\n                foreColor = palette.onMain\n                background = palette.main\n                backgroundRipple = palette.onContainer\n                backgroundFocus = palette.main\n                break\n            case 'tonal':\n                foreColor = palette.onLight\n                background = palette.light\n                backgroundRipple = palette.main\n                backgroundFocus = \"transparent\"\n                break\n            case 'text':\n            default:\n                foreColor = palette.onContainer\n                background = \"none\"\n                backgroundRipple = \"transparent\"\n                backgroundFocus = \"transparent\"\n                break\n        }\n        foreColorDisabled = theme.vars.palette.neutral.container\n        backgroundDisabled = theme.vars.palette.neutral.light\n        borderColorDisabled = outlined ? theme.vars.palette.neutral.container : \"transparent\"\n\n        return css`\n            --Input-baseSize: ${baseSize};\n            --Icon-fontSize: ${iconFontSize};\n            --Text-fontSize: ${textFontSize};\n            --Input-minHeight: calc(var(--Input-baseSize) * 4px);\n            --Input-decoratorChildHeight: calc((var(--Input-baseSize) - 1) * 4px);\n            --Input-decoratorChildOffset: calc(var(--Input-baseSize) * 1px - 2px);\n            --Input-elevationLevel: ${elevation[0]};\n            ${shape === 'round' ? css`\n                --Input-decoratorChildRadius: calc((var(--Input-baseSize) - 1) * 2px);\n            `: css`\n                --Input-decoratorChildRadius: calc(var(--Input-radius, ${theme.vars.radius.sm}) - 2px);\n            `}\n            cursor: text;\n            display: flex;\n            position: relative;\n            box-sizing: border-box;\n            width: 100%;\n            font-family: var(--Input-fontFamily, ${theme.vars.fontFamily.body});\n            font-size: calc(var(--Text-fontSize) * 1px);\n            line-height: ${theme.vars.lineHeight.md};\n            min-height: var(--Input-minHeight);\n            color: var(--Input-color, ${foreColor});\n            background:  var(--Input-background, ${background});\n            border: none;\n            outline: none;\n            box-shadow: \n                0px calc(1px*(clamp(0,var(--Input-elevationLevel),1) + clamp(0,var(--Input-elevationLevel) - 3,1) + 2*clamp(0,var(--Input-elevationLevel) - 4,1))) calc(1px*(2*clamp(0,var(--Input-elevationLevel),1) + clamp(0,var(--Input-elevationLevel) - 2,1) + clamp(0,var(--Input-elevationLevel) - 4,1))) 0px var(--Input-shadowColor, rgba(0, 0, 0, 0.2)),\n                0px calc(1px*(clamp(0,var(--Input-elevationLevel),1) + clamp(0,var(--Input-elevationLevel) - 1,1) + 2*clamp(0,var(--Input-elevationLevel) - 2,3))) calc(1px*(3*clamp(0,var(--Input-elevationLevel),2) + 2*clamp(0,var(--Input-elevationLevel) - 2,3))) calc(1px*(clamp(0,var(--Input-elevationLevel),4) + 2*clamp(0,var(--Input-elevationLevel) - 4,1))) var(--Input-shadowColor, rgba(0, 0, 0, 0.12));\n            transition: \n                opacity 150ms ease 0ms, \n                border-color 150ms ease 0ms, \n                background-color ease 0ms, \n                outline 150ms ease 0ms,\n                box-shadow 150ms ease 0ms;\n       \n            &::before {\n                content: \"\";     \n                position: absolute;       \n                pointer-events: none;\n                background: ${backgroundRipple};\n                inset: 0;\n                opacity: 0;            \n                transition: opacity 150ms ease 0ms; \n            }\n            &::after {\n                content: \"\";\n                position: absolute;\n                pointer-events: none;\n                inset: 0;\n                border-width: 1px;\n                border-style: solid;\n                border-color: var(--Input-borderColor, ${borderColor});\n                outline-offset: -1px;\n                outline-color: ${outlineColor};\n                outline-width: 0px;\n                outline-style: solid;\n                transition: \n                    opacity 150ms ease 0ms,\n                    outline 150ms cubic-bezier(0.18, 0.89, 0.32, 1.28) 0ms;\n            }\n            & svg {\n                user-select: none;\n                width: 1em;\n                height: 1em;\n                fill: currentColor;\n                font-size: calc(var(--Icon-fontSize) * 1px);\n            }\n            &:has(\\.${_}-element:not(:disabled)) {\n                &:hover {\n                    --Input-elevationLevel: ${elevation[1]};\n                    &::before {\n                        opacity: .1;\n                    }\n                }\n            }\n            /* has input focus */\n            &:has(\\.${_}-element:focus) {\n                --Input-elevationLevel: ${elevation[2]};\n                background: ${backgroundFocus};\n                &::before {\n                    opacity: 0;\n                }\n                &::after {\n                    z-index: 1;\n                    outline-width: 2px;\n                }\n            }\n            & .${_} {\n                display: inline-flex;\n                flex: auto;\n                & .${_}-prefix {\n                    margin-inline-start: calc(var(--Input-baseSize) * 1px);\n                    display: inline-flex;\n                    align-items: center;\n                }\n                & .${_}-element {\n                    font-family: inherit;\n                    outline: none;\n                    margin: 0;\n                    position: relative;\n                    padding-inline: calc(var(--Input-baseSize) * 1px);\n                    padding-block: 0px;\n                    font-size: calc(var(--Text-fontSize) * 1px);\n                    box-sizing: border-box;\n                    border: none;\n                    background: transparent;\n                    text-overflow: ellipsis;\n                    flex: auto;\n                    line-height: inherit;\n\n                    color: ${colorRewrite};\n                    height: 100%;\n                    &:-webkit-autofill,\n                    &:-webkit-autofill:hover, \n                    &:-webkit-autofill:focus, \n                    &:-webkit-autofill:active{\n                        color: ${colorRewrite} !important;\n                        transition: background-color 5000s ease-in-out 0s;\n                    }\n                    &::placeholder {\n                        color: ${colorRewrite};\n                        opacity: 0.6;\n                    }\n                    &:disabled {\n                        cursor: default;\n                        color: ${foreColorDisabled};\n                    }\n                }\n                & textarea.${_}-element {\n                    padding-block: calc(var(--Input-baseSize) * 1px);\n                }\n                &:has(.${_}-prefix) {\n                    & .${_}-element {\n                        padding-inline-start: 0;\n                    }\n                }\n                &:has(.${_}-suffix) {\n                    & .${_}-element {\n                        padding-inline-end: 0;\n                    }\n                }\n                & .${_}-suffix {\n                    margin-inline-end: calc(var(--Input-baseSize) * 1px);\n                    display: inline-flex;\n                    align-items: center;\n                }\n            }\n            ${shape === 'round' ? css`\n                border-radius: calc(var(--Input-baseSize) * 2px);\n                \n            `: css`\n                border-radius: var(--Input-radius, ${theme.vars.radius.sm});\n               \n            `} \n            &::before, &::after {\n                border-radius: inherit;\n            }\n            & .${_}-start-decorator {\n                --Button-marginInlineStart: calc(var(--Input-decoratorChildOffset) * -1); \n                --Button-minHeight: var(--Input-decoratorChildHeight);\n                --Button-outlineOffset: -1px;\n                --Button-radius: var(--Input-decoratorChildRadius);\n\n                --Checkbox-marginInlineStart: calc(var(--Input-decoratorChildOffset) * -1); \n                --Checkbox-marginInlineEnd: calc(var(--Input-decoratorChildOffset) * -1); \n                --Checkbox-minHeight: var(--Input-decoratorChildHeight);\n                --Checkbox-inner-minHeight: calc((var(--Input-baseSize) - 1) * 2px + 2px);\n                \n                --Switch-marginInlineStart: calc(var(--Input-baseSize)  / 2 * -1px); \n                --Switch-marginInlineEnd: calc(var(--Input-baseSize) / 2 * -1px); \n               \n                --Radio-marginInlineStart: calc(var(--Input-decoratorChildOffset) * -1); \n                --Radio-marginInlineEnd: calc(var(--Input-decoratorChildOffset) * -1); \n                --Radio-minHeight: var(--Input-decoratorChildHeight);\n                --Radio-inner-minHeight: calc((var(--Input-baseSize) - 1) * 2px + 2px);\n            \n                display: inline-flex;\n                position: relative;\n                align-items: center;\n                margin-inline-start: calc(var(--Input-baseSize) * 1px);\n                &.${_}-in-enter {\n                    opacity: 0;\n                    margin-inline-start: 0;\n                }\n                &.${_}-in-enter-active  {\n                    opacity: 1;\n                    margin-inline-start: calc(var(--Input-baseSize) * 1px);\n                    transition: \n                        opacity 150ms ease 50ms,\n                        margin-inline-start 150ms ease 0ms;\n                }\n                &.${_}-in-exit {\n                    opacity: 1;\n                    margin-inline-start: calc(var(--Input-baseSize) * 1px);\n                }\n                &.${_}-in-exit-active {\n                    opacity: 0;\n                    margin-inline-start: 0;\n                    transition: \n                        opacity 150ms ease 0ms,\n                        margin-inline-start 150ms ease 0ms;\n                } \n            }\n            & .${_}-end-decorator {\n                --Button-marginInlineEnd: calc(var(--Input-decoratorChildOffset) * -1); \n                --Button-minHeight: var(--Input-decoratorChildHeight);\n                --Button-outlineOffset: -1px;\n                --Button-radius: var(--Input-decoratorChildRadius);\n\n                --Checkbox-marginInlineStart: calc(var(--Input-decoratorChildOffset) * -1); \n                --Checkbox-marginInlineEnd: calc(var(--Input-decoratorChildOffset) * -1); \n                --Checkbox-minHeight: var(--Input-decoratorChildHeight);\n                --Checkbox-inner-minHeight: calc((var(--Input-baseSize) - 1) * 2px + 2px);\n\n                --Switch-marginInlineStart: calc(var(--Input-baseSize)  / 2 * -1px); \n                --Switch-marginInlineEnd: calc(var(--Input-baseSize) / 2 * -1px); \n                \n                --Radio-marginInlineStart: calc(var(--Input-decoratorChildOffset) * -1); \n                --Radio-marginInlineEnd: calc(var(--Input-decoratorChildOffset) * -1); \n                --Radio-minHeight: var(--Input-decoratorChildHeight);\n                --Radio-inner-minHeight: calc((var(--Input-baseSize) - 1) * 2px + 2px);\n               \n                display: inline-flex;\n                position: relative;\n                align-items: center;\n                margin-inline-end: calc(var(--Input-baseSize) * 1px);\n                &.${_}-in-enter {\n                    opacity: 0;\n                    margin-inline-end: 0;\n                }\n                &.${_}-in-enter-active  {\n                    opacity: 1;\n                    margin-inline-end: calc(var(--Input-baseSize) * 1px);\n                    transition: \n                        opacity 150ms ease 50ms,\n                        margin-inline-end 150ms ease 0ms;\n                }\n                &.${_}-in-exit {\n                    opacity: 1;\n                    margin-inline-end: calc(var(--Input-baseSize) * 1px);\n                }\n                &.${_}-in-exit-active {\n                    opacity: 0;\n                    margin-inline-end: 0;\n                    transition: \n                        opacity 150ms ease 0ms,\n                        margin-inline-end 150ms ease 0ms;\n                } \n            }\n            &:has(\\.${_}-element:disabled) {\n                --Input-elevationLevel: ${elevation[0]};\n                cursor: default;\n                color: ${foreColorDisabled};\n                background: ${backgroundDisabled};\n                &::after {\n                    border-color: rgb(${borderColorDisabled});\n                }\n            }\n        `\n    }}\n    ${props => {\n        return mergeStyleOverrides('TuiInput', props.$options)\n    }}\n`"],"names":[],"sourceRoot":""}