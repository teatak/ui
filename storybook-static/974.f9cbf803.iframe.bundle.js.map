{"version":3,"file":"974.f9cbf803.iframe.bundle.js","mappings":";AAMA;AAyEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;AAiBA;AACA;;;;;;;;;;;;;;;AAeA;;;;;;;;AAQA;;;;;AAKA;;;AAGA;;;;AAIA;;;AAGA;;;;;AAKA;;;AAGA;AACA;;;;;AAKA;;;;;;;;AAQA;;AAEA;AACA;;;;;AAKA;AACA;;;;;;;;AAQA;;;;;;;;;;;;;AAaA;;AAEA;;;;;;;AAOA;;AAEA;;AAEA;;;;AAIA;;AAEA;;;;;;;;;;AAUA;;;;AAIA;AAEA;;;;;;;;;;;;;;AClNA;;;;;;;;AAUA;AACA;;;AAGA;;AAIA","sources":["webpack://@teatak/ui/./src/components/Button/Button.styled.tsx","webpack://@teatak/ui/./src/icons/custom/Loading/Loading.tsx"],"sourcesContent":["import styled, { css } from 'styled-components'\nimport { ButtonOptionsProps } from './Button.types'\nimport theme, { mergeStyleOverrides, ColorTone, ColorVariant } from '@/style'\nimport { themes } from 'storybook/internal/theming'\n\nexport const StyledButton = styled.button<{ $options: ButtonOptionsProps }>`\n    ${props => {\n        const options = props.$options\n        const { prefixClass: _, variant, color, outlined, elevation = [0, 0, 0], size, shape, icon } = options\n\n        let baseSize = 8\n        let textFontSize = 14\n        let iconFontSize = 12\n        //按照尺寸定义变量\n        switch (size) {\n            case 'xs':\n                baseSize = 6\n                textFontSize = 11\n                iconFontSize = baseSize * 2\n                break\n            case 'sm':\n                baseSize = 7\n                textFontSize = 12\n                iconFontSize = baseSize * 2\n                break\n            case 'md':\n                baseSize = 8\n                textFontSize = 14\n                iconFontSize = baseSize * 2\n                break\n            case 'lg':\n                baseSize = 9\n                textFontSize = 14\n                iconFontSize = baseSize * 2\n                break\n            case 'xl':\n                baseSize = 10\n                textFontSize = 16\n                iconFontSize = baseSize * 2\n                break\n        }\n\n        let palette = theme.vars.palette[color!] as ColorTone & ColorVariant\n        if (palette === undefined) {\n            palette = theme.vars.palette.primary\n        }\n        let outlineColor = color === 'neutral' ? theme.vars.palette.primary.main : palette.main\n        let borderColor = outlined ? variant === 'filled' ?\n            palette.dark :\n            palette.main : 'transparent'\n\n        let foreColor, background, backgroundRipple, hoverOpacity, activeOpacity\n\n        switch (variant) {\n            case 'filled':\n                foreColor = palette.onMain\n                background = palette.main\n                backgroundRipple = theme.vars.palette.common.black\n                hoverOpacity = 0.2\n                activeOpacity = 0.3\n                break\n            case 'tonal':\n                foreColor = palette.onContainer\n                background = palette.container\n                backgroundRipple = palette.main\n                hoverOpacity = 0.1\n                activeOpacity = 0.2\n                break\n            case 'text':\n            default:\n                foreColor = palette.onContainer\n                background = 'none'\n                backgroundRipple = palette.main\n                hoverOpacity = 0.1\n                activeOpacity = 0.2\n                break\n        }\n\n        return css`\n            --Button-baseSize: ${baseSize};\n            --Button-elevationLevel: ${elevation[0]};\n            --Icon-fontSize: ${iconFontSize};\n            --Text-fontSize: ${textFontSize};\n            font-family: var(--Button-fontFamily, ${theme.vars.fontFamily.body});\n            font-size: calc(var(--Text-fontSize) * 1px);\n            line-height: ${theme.vars.lineHeight.md};\n            min-height: var(--Button-minHeight, calc(var(--Button-baseSize) * 4px));\n            margin-inline-start: var(--Button-marginInlineStart);\n            margin-inline-end: var(--Button-marginInlineEnd);\n            padding-inline: calc(var(--Button-baseSize) * 1px);\n            box-sizing: border-box;\n            position: relative;\n            display: inline-flex;\n            vertical-align: middle;\n            justify-content: center;\n            align-items: center;\n            cursor: pointer;\n            text-decoration: none;\n            user-select: none;\n            border: none;\n            outline: none;\n            opacity: 1;\n            color: var(--Button-color, ${foreColor});\n            background:  var(--Button-background, ${background});\n            box-shadow: \n                0px calc(1px*(clamp(0,var(--Button-elevationLevel),1) + clamp(0,var(--Button-elevationLevel) - 3,1) + 2*clamp(0,var(--Button-elevationLevel) - 4,1))) calc(1px*(2*clamp(0,var(--Button-elevationLevel),1) + clamp(0,var(--Button-elevationLevel) - 2,1) + clamp(0,var(--Button-elevationLevel) - 4,1))) 0px var(--Button-shadowColor, rgba(0, 0, 0, 0.2)),\n                0px calc(1px*(clamp(0,var(--Button-elevationLevel),1) + clamp(0,var(--Button-elevationLevel) - 1,1) + 2*clamp(0,var(--Button-elevationLevel) - 2,3))) calc(1px*(3*clamp(0,var(--Button-elevationLevel),2) + 2*clamp(0,var(--Button-elevationLevel) - 2,3))) calc(1px*(clamp(0,var(--Button-elevationLevel),4) + 2*clamp(0,var(--Button-elevationLevel) - 4,1))) var(--Button-shadowColor, rgba(0, 0, 0, 0.12));\n            transition: \n                width 150ms ease 0ms, \n                height 150ms ease 0ms, \n                box-shadow 150ms ease 0ms;\n\n            & svg {\n                width: 1em;\n                height: 1em;\n                fill: currentColor;\n                font-size: calc(var(--Icon-fontSize) * 1px);\n            }\n            & .${_}-span {\n                z-index: 1;\n                display: flex;\n                position: relative;\n                justify-content: center;\n                align-items: center;\n                margin-inline: calc(var(--Button-baseSize) * 1px);\n            }\n            & .${_}-start-decorator, & .${_}-end-decorator {\n                z-index: 1;\n                position: relative;\n                display: inline-flex;\n                align-items: center;\n                &.${_}-in-enter {\n                    width: 0;\n                }\n                &.${_}-in-enter-active  {\n                    width: calc(var(--Icon-fontSize) * 1px);\n                    transition: width 150ms ease 0ms;\n                }\n                &.${_}-in-exit {\n                    width: calc(var(--Icon-fontSize) * 1px);\n                }\n                &.${_}-in-exit-active {\n                    width: 0;\n                    transition: width 150ms ease 0ms;\n                }\n            }\n            &.${_}-loading {\n                opacity: 0.7;\n                cursor: default;\n                & .${_}-span {\n                    & .${_}-span-text {\n                        display: inline-flex;\n                        line-height: 1;\n                        color: transparent;\n                    }\n                    & .${_}-span-loading {\n                        display: inline-flex;\n                        position: absolute;\n                        left: 50%;\n                        transform: translate(-50%);\n                    }\n                }\n            }\n            ${shape === 'round' ? css`\n                border-radius: var(--Button-radius, calc(var(--Button-baseSize) * 2px));\n            `: css`\n                border-radius: var(--Button-radius, ${theme.vars.radius.sm});\n            `}\n            &::after, &::before {\n                border-radius: inherit;\n            }\n            ${icon && css`\n                & .${_}-span {\n                    display: flex;\n                    overflow: hidden;\n                    text-overflow: ellipsis;\n                    margin: 0;\n                }                \n            `}\n            &::before {\n                background: ${backgroundRipple};\n                content: \"\";\n                position: absolute;\n                inset: 0;\n                opacity: 0;            \n                transition: opacity 150ms ease 0ms; \n            }\n            &::after {\n                content: \"\";\n                position: absolute;\n                inset: 0;\n                border-width: 1px;\n                border-style: solid;\n                border-color: var(--Button-borderColor, ${borderColor});\n                outline-offset: var(--Button-outlineOffset, 1px);\n                outline-color: ${outlineColor};\n                outline-width: 0px;\n                outline-style: solid;\n                transition: \n                    opacity 150ms ease 0ms,\n                    outline-width 250ms cubic-bezier(0, 0, 0, 3) 0ms;\n            }\n            &:not(:disabled):not(.${_}-loading) {\n                &:hover {\n                    --Button-elevationLevel: ${elevation[1]};\n                    &::before {\n                        opacity: ${hoverOpacity};\n                    }\n                }\n                &:active,&.clicked {\n                    --Button-elevationLevel: ${elevation[2]};\n                    &::before {\n                        opacity: ${activeOpacity};\n                    }\n                }\n                &:focus-visible {\n                    &::after {\n                        z-index: 1;\n                        outline-width: 2px;\n                    }\n                }\n            }\n            &.${_}-disabled, &:disabled {\n                opacity: 0.5;\n                cursor: default;\n            }\n        `\n    }}\n    ${props => {\n        return mergeStyleOverrides('TuiButton', props.$options)\n    }}\n`","import React from 'react';\nimport classnames from \"classnames\"\nimport styled, { keyframes } from 'styled-components'\n\nconst dasharray = keyframes`\n    0% {\n        stroke-dasharray: 1px, 200px;\n        stroke-dashoffset: 0;\n    }\n    50% {\n        stroke-dasharray: 100px, 200px;\n        stroke-dashoffset: -15px;\n    }\n    100% {\n        stroke-dasharray: 100px, 200px;\n        stroke-dashoffset: -125px;\n    }\n`\nconst rotate = keyframes`\n    0% {\n        transform: rotate(0deg);\n    }\n\n    100% {\n        transform: rotate(360deg);\n    }\n`\n\nconst Svg = styled.svg`\n    animation: 1.4s linear 0s infinite normal none running ${rotate};\n    & circle {\n        stroke: currentColor;\n        animation: 1.4s ease-in-out 0s infinite normal none running ${dasharray};\n    }\n`\n\nconst Loading = (props: any) => {\n    const { className, ...rest } = props;\n    const classNames = classnames(\n        'tui-icon-loading',\n        className,\n    );\n    return <Svg className={classNames} viewBox=\"0 0 44 44\" {...rest} >\n        <circle cx='22' cy='22' r='20' fill='none' strokeWidth='4' strokeLinecap='round'></circle>\n    </Svg>\n}\nexport default Loading"],"names":[],"sourceRoot":""}