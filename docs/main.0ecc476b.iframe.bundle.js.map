{"version":3,"file":"main.0ecc476b.iframe.bundle.js","mappings":";;;;;;;;AAwCA;AC0SA;;AAGA;;AAEA;AAjUA;;AAqUA;;AArUA;;AAyUA;;AAEA;AA3UA;;AA+UA;;AA/UA;;AAmVA;;;AAnVA;;;AAyVA;;;;AAIA;;;AAGA;;AAKA;AAkEA;AAEA;AACA;AAEA;AACA;AAEA","sources":["webpack://@teatak/ui/./.storybook/preview.ts","webpack://@teatak/ui/./src/style/theme.tsx"],"sourcesContent":["import type { Preview } from \"@storybook/react\";\nimport { createTheme, prerenderStyle } from '@/style'\nimport { css } from \"styled-components\";\n\ndeclare module '@/style' {\n  interface ColorNameOverrides {\n    custom: true\n  }\n}\nconst theme = createTheme({\n  baseColor: {\n    custom: \"rgb(10, 132, 255)\",\n  },\n  colorSchemes: {\n    light: {\n      custom: {\n      }\n    }\n  },\n  components: {\n    TuiButton: {\n      //styleOverrides StyledObject | ((ownerState: ComponentOwnerState) => StyledObject | RuleSet<object>)\n      styleOverrides: (ownerState) => {\n        const color = ownerState.color\n        return css``\n      }\n    }\n  }\n})\nconsole.log(theme)\nprerenderStyle('system', css`\n  .tui-icon {\n    width: 1em;\n    height: 1em;\n    path[opacity] {\n      opacity: .1;\n    }\n  }\n`)\n\nconst preview: Preview = {\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n};\n\nexport default preview;\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { Theme, ThemeScales, Palette, DefaultColorScheme, BaseColor, Color, ColorName, ColorTone, ColorVariant, ThemeVars } from \"./types\";\nimport { merge, Partial2Level, Partial3Level } from '../helper/common'\nimport { generateColor } from \"./color\";\nimport { cssVarsParser } from './cssVarsParser'\nimport { RuleSet, StyledObject, createGlobalStyle, css } from 'styled-components'\n\nexport type ColorSystemOptions = Partial3Level<Palette>\n\nexport type ColorOptions = Partial3Level<Color>\n\nexport interface ThemeOptions extends Partial2Level<ThemeScales> {\n    cssVarPrefix?: string\n    colorSchemes?: Partial<Record<DefaultColorScheme, ColorSystemOptions>>\n    baseColor?: Partial<BaseColor>\n    color?: ColorOptions\n}\n\n//theme\nexport type Mode = 'system' | 'light' | 'dark'\nconst schemeStorageKey = 'color-scheme'\nconst schemeAttributeKey = 'data-color-scheme'\nlet loadedColorScheme = false\nlet loadedThemeOptions: ThemeOptions\nlet loadedTheme: Theme\n\nexport const themeChanged = (themeOptions?: ThemeOptions) => {\n    let nextOptions = merge(themeOptions || {}, loadedThemeOptions)\n    if (JSON.stringify(nextOptions) == JSON.stringify(loadedThemeOptions)) {\n        return false\n    } else {\n        loadedThemeOptions = nextOptions\n        return true\n    }\n}\n\nexport const mergeStyleOverrides = (name: string, options: any): RuleSet<object> => {\n    const theme = loadedTheme\n    if (theme) {\n        let overrides\n        if (theme.entries.components) {\n            //@ts-ignore\n            const component = theme.entries.components[name]\n            if (component) {\n                overrides = component.styleOverrides\n            }\n        }\n        let themeStyleOverrides = typeof overrides === 'function' ? overrides(options) : overrides\n        let comStyleOverrides = typeof options.styleOverrides === 'function' ? options.styleOverrides(options) : options.styleOverrides\n        return [...css`${themeStyleOverrides}${comStyleOverrides}`]\n    }\n    return []\n}\n\nexport function createTheme(themeOptions?: ThemeOptions, defaultColorScheme: DefaultColorScheme = 'light'): Theme {\n    const changed = themeChanged(themeOptions)\n    if (!changed) {\n        return loadedTheme\n    }\n    const {\n        cssVarPrefix = 'tui',\n        ...scalesInput\n    } = themeOptions || {};\n\n    const defaultColors = {\n        common: {\n            white: 'white',\n            black: 'black',\n        }\n    }\n\n    const baseColor = {\n        // color\n        primary: 'rgb(41, 90, 205)',\n        neutral: 'rgb(152, 152, 152)',\n        danger: 'rgb(205, 41, 41)',\n        success: 'rgb(41, 205, 41)',\n        warning: 'rgb(205, 145, 41)',\n        ...scalesInput.baseColor\n    }\n\n    const makeColors = (dark: boolean) => {\n        let o = {} as Color\n        Object.keys(baseColor).map((k: ColorName) => {\n            let _color = baseColor[k]\n            if (_color) {\n                const range = {\n                    ...generateColor(_color, { dark }),\n                }\n                o[k] = range\n            } else {\n                throw new Error(`color ${k} undefined`)\n            }\n        })\n        return o\n    }\n\n\n    const lightColors = makeColors(false)\n    const darkColors = makeColors(true)\n\n    const createLightModeVariables = (color: ColorName): ColorTone & ColorVariant => {\n        const isLight = true\n        return {\n            ...lightColors[color] as ColorTone,\n            dark: getCssVarColor(`${color}-70`, isLight),\n            onDark: getCssVar('common-white', defaultColors.common.white),\n\n            main: getCssVarColor(`${color}-55`, isLight),\n            onMain: getCssVar('common-white', defaultColors.common.white),\n\n            container: getCssVarColor(`${color}-10`, isLight),\n            onContainer: getCssVarColor(`${color}-90`, isLight),\n\n            light: getCssVarColor(`${color}-5`, isLight),\n            onLight: getCssVarColor(`${color}-90`, isLight),\n        }\n    }\n\n    const createDarkModeVariables = (color: ColorName): ColorTone & ColorVariant => {\n        const isLight = false\n        return {\n            ...darkColors[color] as ColorTone,\n            dark: getCssVarColor(`${color}-70`, isLight),\n            onDark: getCssVar('common-white', defaultColors.common.white),\n\n            main: getCssVarColor(`${color}-55`, isLight),\n            onMain: getCssVar('common-white', defaultColors.common.white),\n\n            container: getCssVarColor(`${color}-10`, isLight),\n            onContainer: getCssVarColor(`${color}-90`, isLight),\n\n            light: getCssVarColor(`${color}-5`, isLight),\n            onLight: getCssVarColor(`${color}-90`, isLight),\n        }\n    }\n\n    const loadColorsVariables = (scheme: 'light' | 'dark') => {\n        let o = {} as Record<ColorName, ColorTone & ColorVariant>\n        Object.keys(baseColor).map((k: ColorName) => {\n            if (scheme == 'light') {\n                o[k] = {\n                    ...createLightModeVariables(k),\n                }\n            } else {\n                o[k] = {\n                    ...createDarkModeVariables(k),\n                }\n            }\n        })\n        return o\n    }\n\n    const getCssVar = (cssVar?: string, fallback?: string) => {\n        return `var(--${cssVarPrefix}-${cssVar}${fallback ? `, ${fallback}` : ''})`\n    }\n\n    const getCssVarColor = (cssVar: string, light: boolean) => {\n        const tokens = cssVar.split('-');\n        const color = tokens[0];\n        const index = tokens[1];\n\n        // @ts-ignore\n        return `rgb(var(--${cssVarPrefix}-${cssVar}, ${light ? lightColors[color]?.[index] : darkColors[color]?.[index]}))`\n    }\n\n    const fontFamilyFallback = '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"';\n\n\n    const lightColorSystem: Palette = {\n        mode: 'light',\n        ...loadColorsVariables('light'),\n        common: {\n            ...defaultColors.common\n        },\n        surface: {\n            //dim\n            dark: getCssVarColor('neutral-20', true),\n            onDark: getCssVarColor('neutral-95', true),\n            //main\n            main: getCssVarColor('neutral-10', true),\n            onMain: getCssVarColor('neutral-95', true),\n            //container\n            container: getCssVarColor('neutral-5', true),\n            onContainer: getCssVarColor('neutral-95', true),\n            //body\n            body: getCssVar('common-white', defaultColors.common.white),\n            onBody: getCssVarColor('neutral-95', true),\n            //inverse\n            inverseMain: getCssVarColor('neutral-90', true),\n            inverseOnMain: getCssVarColor('neutral-5', true),\n        },\n    }\n\n    const darkColorSystem: Palette = {\n        mode: 'dark',\n        ...loadColorsVariables('dark'),\n        common: {\n            ...defaultColors.common\n        },\n        surface: {\n            //dim\n            dark: getCssVarColor('neutral-15', false),\n            onDark: getCssVarColor('neutral-95', false),\n            //main\n            main: getCssVarColor('neutral-10', false),\n            onMain: getCssVarColor('neutral-95', false),\n            //container\n            container: getCssVarColor('neutral-5', false),\n            onContainer: getCssVarColor('neutral-95', false),\n            //body\n            body: getCssVarColor('neutral-0', false),\n            onBody: getCssVarColor('neutral-95', false),\n            //inverse\n            inverseMain: getCssVarColor('neutral-90', false),\n            inverseOnMain: getCssVarColor('neutral-5', false),\n        },\n    }\n\n    const defaultScales = {\n        entries: {\n            defaultColorScheme: defaultColorScheme,\n            baseColor: baseColor,\n            color: lightColors,\n            colorSchemes: {\n                light: lightColorSystem,\n                dark: darkColorSystem,\n            },\n            breakpoint: {\n                xs: 0,\n                sm: 600,\n                md: 900,\n                lg: 1200,\n                xl: 1536,\n            },\n            fontFamily: {\n                body: `\"Inter\", ${getCssVar(`fontFamily-fallback`, fontFamilyFallback)}`,\n                display: `\"Inter\", ${getCssVar(`fontFamily-fallback`, fontFamilyFallback)}`,\n                code: 'Source Code Pro,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace',\n                fallback: fontFamilyFallback,\n            },\n            fontSize: {\n                xs: '0.625rem', // 10px\n                sm: '0.75rem', // 12px\n                md: '0.875rem', // 14px\n                lg: '1rem', // 16px\n                xl: '1.125rem', // 18px\n                xl2: '1.25rem', // 20px\n                xl3: '1.5rem', // 24px\n                xl4: '2rem', //32px\n            },\n            lineHeight: {\n                xs: '1.33334', // largest font sizes: h1, h2\n                sm: '1.42858', // normal font sizes\n                md: '1.5', // normal font sizes\n                lg: '1.55556', // large font sizes for components\n                xl: '1.66667', // smallest font sizes\n            },\n            radius: {\n                xs: '2px',\n                sm: '4px',\n                md: '6px',\n                lg: '8px',\n                xl: '12px',\n            },\n            shadow: {\n                xs: 'rgba(0, 0, 0, 0.08) 0px 1px 2px 0px',\n                sm: 'rgba(0, 0, 0, 0.08) 0px 1px 2px 0px, rgba(0, 0, 0, 0.08) 0px 2px 4px 0px',\n                md: 'rgba(0, 0, 0, 0.08) 0px 2px 8px -2px, rgba(0, 0, 0, 0.08) 0px 6px 12px -2px',\n                lg: 'rgba(0, 0, 0, 0.08) 0px 2px 8px -2px, rgba(0, 0, 0, 0.08) 0px 12px 16px -4px',\n                xl: 'rgba(0, 0, 0, 0.08) 0px 2px 8px -2px, rgba(0, 0, 0, 0.08) 0px 20px 24px -4px ',\n            },\n            zIndex: {\n                badge: 1,\n                table: 10,\n                popup: 1000,\n                modal: 1300,\n                snackbar: 1400,\n                tooltip: 1500,\n            },\n        }\n    } as unknown as Theme\n\n    const { colorSchemes, ...mergedScales } = scalesInput\n        ? merge(defaultScales.entries, scalesInput)\n        : defaultScales.entries;\n\n    const { vars: themeVars, css: themeCss } = prepareCssVars({ colorSchemes, ...mergedScales }, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar: (keys: string[]) => {\n            //skip mode\n            return keys[0] === 'breakpoints' || keys[0] === 'mode'\n        }\n    })\n\n    let theme: Theme = {\n        entries: {\n            colorSchemes,\n            ...mergedScales\n        },\n        vars: themeVars,\n        css: themeCss,\n    }\n    // theme.vars.palette.warning\n\n    return loadedTheme = theme\n}\n\nfunction prepareCssVars(theme: any, parserConfig: any) {\n    const { colorSchemes = {}, color, baseColor, components, defaultColorScheme = 'light', ...otherTheme } = theme;\n    let { vars, css, varsWithDefaults } = cssVarsParser(otherTheme, parserConfig)\n    let themeVars = varsWithDefaults as ThemeVars\n    const colorSchemesMap: any = { root: css }\n    let palette: any = {}\n\n    const { [defaultColorScheme]: light, ...otherColorSchemes } = colorSchemes;\n    Object.entries(otherColorSchemes || {}).forEach(([key, _scheme]) => {\n        //let  _scheme = Object.assign({},scheme)\n        const { vars, css, varsWithDefaults } = cssVarsParser(_scheme, parserConfig);\n        palette = merge(palette, varsWithDefaults);\n        colorSchemesMap[key] = css\n    });\n    if (light) {\n        // default color scheme vars should be merged last to set as default\n        const { vars, css, varsWithDefaults } = cssVarsParser(light, parserConfig);\n        palette = merge(palette, varsWithDefaults);\n        colorSchemesMap[defaultColorScheme] = css\n    }\n    themeVars = merge(themeVars, { palette })\n    return {\n        vars: themeVars,\n        css: colorSchemesMap,\n    }\n}\nlet _defaultMode: Mode = 'system'\n\nconst GlobalColorScheme = createGlobalStyle<{ $defaultMode: Mode, $root: any, $light: any, $dark: any, $customCss: any }>`\n  ${props => {\n        return css`\n            :root {\n                ${props.$root}\n            }\n            ${props.$defaultMode === 'dark' ?\n                css`\n                    [${schemeAttributeKey}='light'] {\n                        color-scheme: light;\n                        ${props.$light}\n                    }\n                    :root, [${schemeAttributeKey}='dark'] {\n                        color-scheme: dark;\n                        ${props.$dark}\n                    }\n                ` :\n                css`\n                    :root, [${schemeAttributeKey}='light'] {\n                        color-scheme: light;\n                        ${props.$light}\n                    }\n                    [${schemeAttributeKey}='dark'] {\n                        color-scheme: dark;\n                        ${props.$dark}\n                    }\n                `}\n            [${schemeAttributeKey}='system'] {\n                @media (prefers-color-scheme: light) {\n                    color-scheme: light;\n                    ${props.$light}\n                }\n                @media (prefers-color-scheme: dark) {\n                    color-scheme: dark;\n                    ${props.$dark}\n                }\n            }\n            ${props.$customCss}\n        `\n    }}\n`\n\nfunction loadedVars(vars: 'root' | 'light' | 'dark') {\n    if (loadedTheme) {\n        let items = loadedTheme.css[vars]\n        let lines: string[] = []\n        Object.keys(items).map((k) => {\n            let str = `${k}: ${items[k]};\\n`\n            lines.push(str)\n        })\n        return lines.join('')\n    }\n    return \"\"\n}\n\n// 获取用户倾向样式\nexport const getMode = () => {\n    const scheme = localStorage.getItem(schemeStorageKey)\n    if (scheme) {\n        return scheme\n    } else {\n        return _defaultMode\n    }\n}\n\nexport const detectMode = () => {\n    const scheme = localStorage.getItem(schemeStorageKey)\n    if (scheme === \"system\" || scheme === null) {\n        let isDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches\n        return isDark ? 'dark' : 'light'\n    } else {\n        return scheme\n    }\n\n}\n// 设置用户倾向样式\nexport const setMode = (scheme: Mode) => {\n    localStorage.setItem(schemeStorageKey, scheme)\n    reflectMode()\n}\n// 设置用户倾向样式\nexport const restoreMode = () => {\n    localStorage.removeItem(schemeStorageKey)\n    reflectMode()\n}\n// 应用用户倾向样式\nexport const reflectMode = () => {\n    const scheme = localStorage.getItem(schemeStorageKey)\n    if (scheme) {\n        document.firstElementChild?.setAttribute(schemeAttributeKey, scheme)\n    } else {\n        if (_defaultMode == 'system') {\n            document.firstElementChild?.setAttribute(schemeAttributeKey, _defaultMode)\n        }\n    }\n}\n\nexport const prerenderStyle = (defaultMode: Mode = 'system', customCss?: any) => {\n    if (!loadedColorScheme) {\n        if (defaultMode) {\n            _defaultMode = defaultMode\n        }\n        reflectMode()\n        loadedColorScheme = true\n        ReactDOM.createRoot(document.createElement('div')).render(\n            <GlobalColorScheme\n                $defaultMode={_defaultMode}\n                $root={css`\n                    ${loadedVars('root')}\n                `}\n                $light={css`\n                    ${loadedVars('light')}\n                `}\n                $dark={css`\n                    ${loadedVars('dark')}\n                `}\n                $customCss={customCss}\n            />\n        )\n    }\n}"],"names":[],"sourceRoot":""}