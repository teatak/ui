{"version":3,"file":"stories-inputs-Form-stories.e3ce116f.iframe.bundle.js","mappings":";AAKA;;AAMA;AACA;AACA;AAEA;AAKA;;;;;;AAgBA;AACA;;AAEA;AACA;;;;;;AAMA;;;AAGA;AACA;;;;;;;AAOA;;AAEA;AACA;AACA;;;AAIA;;;;;AAMA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;;AAEA;;;AAIA;AC/FA;AA+EA;AACA;AACA;AACA;;AAEA;;;;;;;;AAQA;;;;;;;AAOA;;;AAGA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;AAeA;;;;;AAKA;;;AAGA;;AAEA;AACA;;AAEA;;;;AAIA;;AAEA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;AAMA;AACA;;;AAGA;;;;;AAKA;;;;;AAKA;AACA;AACA;;;;;AAKA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA;;AAEA;;;;AAIA;AAEA;;AChRA;AA+EA;AACA;AACA;AACA;;AAEA;;;;;;;;AAQA;;;;;;;AAOA;;;AAGA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;AAeA;;;;;AAKA;;;AAGA;;AAEA;AACA;;AAEA;;;;AAIA;;AAEA;;;;;;;;;AASA;;;;;;;;;;;;AAYA;;;;;;AAMA;AACA;;;AAGA;;;;;AAKA;;;;;AAKA;AACA;AACA;;;;;AAKA;AACA;AACA;;AAEA;;;;;;;;;;;AAWA;;AAEA;;;;AAIA;AAEA;;AC/NA;AAoCA;AACA;AACA;AACA;;;;;;AAMA;AACA;;AAEA;;;AAGA;AAEA;AAIA","sources":["webpack://@teatak/ui/./src/components/ButtonGroup/ButtonGroup.style.tsx","webpack://@teatak/ui/./src/components/Checkbox/Checkbox.styled.tsx","webpack://@teatak/ui/./src/components/Radio/Radio.styled.tsx","webpack://@teatak/ui/./src/components/Control/ControlLabel.tsx"],"sourcesContent":["import styled, { css } from 'styled-components'\nimport { ButtonGroupOptionsProps } from './ButtonGroup.types'\nimport theme, { mergeStyleOverrides, ColorTone, ColorVariant } from '@/style'\n\nexport const StyledButtonGroup = styled.div<{ $options: ButtonGroupOptionsProps }>`\n    ${props => {\n        const options = props.$options\n        const _ = options.prefixClass\n        const direction = options.direction\n        return css`\n            display: flex;\n            flex-direction: ${direction};\n            ${groupBase(options)}\n        `\n    }}\n    ${props => {\n        return mergeStyleOverrides('TuiButtonGroup', props.$options)\n    }}\n`\n\nconst groupBase = (options: ButtonGroupOptionsProps) => {\n    const { prefixClass: _, direction, variant, color, outlined, elevation = [0, 0, 0] } = options\n    let palette = theme.vars.palette[color!] as ColorTone & ColorVariant\n    if (palette === undefined) {\n        palette = theme.vars.palette.neutral\n    }\n    let splitColor = variant === 'filled' ? `rgb(${palette[20]})` : `rgb(${palette[60]})`\n\n    switch (direction) {\n        case 'row':\n            return css`\n                align-items: center;\n                &>:first-child:not(:only-child) {\n                    border-start-end-radius: 0px;\n                    border-end-end-radius: 0px;\n                    &::after {\n                        border-color: ${splitColor};\n                        border-inline-start-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-inline-end-width: 1px;\n                        border-block-start-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-block-end-width: ${outlined ? \"1px\" : \"0px\"} ;\n                    }\n                }\n                &>:not(:first-child):not(:last-child):not(:only-child) {\n                    border-radius: 0px;\n                    &::after {\n                        border-color: ${splitColor};\n                        border-inline-start-width: 0px;\n                        border-inline-end-width: 1px;\n                        border-block-start-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-block-end-width: ${outlined ? \"1px\" : \"0px\"} ;\n                    }\n                }\n                &>:last-child:not(:only-child) {\n                    border-top-left-radius: 0px;\n                    border-bottom-left-radius: 0px;\n                    &::after {\n                        border-color: ${splitColor};\n                        border-inline-start-width: 0px;\n                        border-inline-end-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-block-start-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-block-end-width: ${outlined ? \"1px\" : \"0px\"} ;\n                    }\n                }\n            `\n        case 'column':\n            return css`\n                &>:first-child:not(:only-child) {\n                    border-end-start-radius: 0px;\n                    border-end-end-radius: 0px;\n                    &::after {\n                        border-color: ${splitColor};\n                        border-inline-start-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-inline-end-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-block-start-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-block-end-width: 1px ;\n                    }\n                }\n                &>:not(:first-child):not(:last-child):not(:only-child) {\n                    border-radius: 0px;\n                    &::after {\n                        border-color: ${splitColor};\n                        border-inline-start-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-inline-end-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-block-start-width: 0px;\n                        border-block-end-width: 1px;\n                    }\n                }\n                &>:last-child:not(:only-child) {\n                    border-top-right-radius: 0px;\n                    border-top-left-radius: 0px;\n                    &::after {\n                        border-color: ${splitColor};\n                        border-inline-start-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-inline-end-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-block-start-width: 0px;\n                        border-block-end-width: ${outlined ? \"1px\" : \"0px\"} ;\n                    }\n                }\n            `\n        default:\n            return null\n    }\n}\n","import styled, { css } from 'styled-components'\nimport { CheckboxOptionsProps } from './Checkbox.types'\nimport theme, { mergeStyleOverrides, ColorTone, ColorVariant } from '@/style'\n\nexport const StyledCheckbox = styled.label<{ $options: CheckboxOptionsProps }>`\n    ${props => {\n        const options = props.$options\n        const { prefixClass: _, variant, outlined, color, size, shape } = options\n\n        let baseSize = 8\n        let textFontSize = 14\n        let iconFontSize = 12\n        //按照尺寸定义变量\n        switch (size) {\n            case 'xs':\n                baseSize = 6\n                textFontSize = 11\n                iconFontSize = baseSize * 2\n                break\n            case 'sm':\n                baseSize = 7\n                textFontSize = 12\n                iconFontSize = baseSize * 2\n                break\n            case 'md':\n                baseSize = 8\n                textFontSize = 14\n                iconFontSize = baseSize * 2\n                break\n            case 'lg':\n                baseSize = 9\n                textFontSize = 14\n                iconFontSize = baseSize * 2\n                break\n            case 'xl':\n                baseSize = 10\n                textFontSize = 16\n                iconFontSize = baseSize * 2\n                break\n        }\n\n        let palette = theme.vars.palette[color!] as ColorTone & ColorVariant\n        if (palette === undefined) {\n            palette = theme.vars.palette.primary\n        }\n        let outlineColor = color === 'neutral' ? theme.vars.palette.primary.main : palette.main\n        let borderColor = outlined ?\n            variant === 'filled' ? palette.dark : palette.container\n            : 'transparent'\n\n        let foreColor, background, backgroundRipple,\n            hoverOpacity, activeOpacity, foreColorChecked, backgroundChecked\n\n        foreColor = theme.vars.palette.surface.onDark\n\n        switch (variant) {\n            case 'filled':\n                background = palette.main\n                backgroundRipple = palette.main\n                hoverOpacity = 0.2\n                activeOpacity = 0.3\n                backgroundChecked = palette.main\n                foreColorChecked = palette.onMain\n                break\n            case 'tonal':\n                background = palette.light\n                backgroundRipple = palette.main\n                hoverOpacity = 0.1\n                activeOpacity = 0.2\n                backgroundChecked = palette.container\n                foreColorChecked = palette.onContainer\n                break\n            case 'text':\n            default:\n                background = 'none'\n                backgroundRipple = palette.main\n                hoverOpacity = 0.1\n                activeOpacity = 0.2\n                backgroundChecked = palette.light\n                foreColorChecked = palette.onLight\n                break\n        }\n\n        return css`\n            --Checkbox-baseSize: ${baseSize};\n            --Icon-fontSize: ${iconFontSize};\n            --Text-fontSize: ${textFontSize};\n            font-family: var(--Checkbox-fontFamily, ${theme.vars.fontFamily.body});\n            font-size: calc(var(--Text-fontSize) * 1px);\n            line-height: ${theme.vars.lineHeight.md};\n            margin-inline-start: var(--Checkbox-marginInlineStart);\n            margin-inline-end: var(--Checkbox-marginInlineEnd);\n            box-sizing: border-box;\n            position: relative;\n            display: inline-flex;\n            vertical-align: middle;\n            align-items: center;\n            color: ${foreColor};\n            transition: \n                opacity 150ms ease 0ms, \n                border-color 150ms ease 0ms, \n                background-color ease 0ms, \n                outline 150ms ease 0ms,\n                box-shadow 150ms ease 0ms;\n            & .${_}-action{\n                position: absolute;\n                inset: 0;\n                & .${_}-element {\n                    cursor: pointer;\n                    position: absolute;\n                    margin: 0;\n                    outline: 0;\n                    opacity: 0; \n                    width: 100%;\n                    height: 100%;\n                    &:disabled {\n                        cursor: default;\n                    }\n                } \n            }\n            & svg {\n                user-select: none;\n                width: 1em;\n                height: 1em;\n                fill: currentColor;\n                font-size: calc(var(--Icon-fontSize) * 1px);\n            }\n            & .${_} {\n                position: relative;\n                cursor: pointer;\n                width: var(--Checkbox-minHeight, calc(var(--Checkbox-baseSize) * 4px));\n                height: var(--Checkbox-minHeight, calc(var(--Checkbox-baseSize) * 4px));\n                border-radius: calc(var(--Checkbox-baseSize) * 2px);\n                display: inline-flex;\n                justify-content: center;\n                align-items: center;\n                flex-shrink: 0;\n                &::before {\n                    content: \"\";     \n                    position: absolute;       \n                    border-radius: inherit;\n                    pointer-events: none;\n                    background: ${backgroundRipple};\n                    inset: 0;\n                    opacity: 0;            \n                    transition: opacity 150ms ease 0ms; \n                }\n                & .${_}-inner {\n                    width: var(--Checkbox-inner-minHeight, calc(var(--Checkbox-baseSize) * 2px + 2px));\n                    height: var(--Checkbox-inner-minHeight, calc(var(--Checkbox-baseSize) * 2px + 2px));\n                    ${shape === 'round' ? css`\n                        border-radius: var(--Checkbox-radius, calc(var(--Checkbox-baseSize) * 2px));\n                    `: css`\n                        border-radius: var(--Checkbox-radius, ${theme.vars.radius.sm});\n                    `}\n                    background: var(--Checkbox-background, ${background}); \n                    box-sizing: border-box;\n                    border-width: 2px;\n                    border-style: solid;\n                    border-color: var(--Checkbox-borderColor, ${borderColor});\n                    outline-offset: var(--Checkbox-outlineOffset, 1px);\n                    outline-color: ${outlineColor};\n                    outline-width: 0px;\n                    outline-style: solid;\n                    display: flex;\n                    transition: \n                        opacity 150ms ease 0ms,\n                        background-color 150ms ease 0ms,\n                        outline-width 250ms cubic-bezier(0, 0, 0, 3) 0ms;\n                    \n                    & svg {\n                        fill: ${foreColorChecked};\n                        z-index: 1;\n                        width: 100%;\n                        height: 100%;\n                        overflow: visible;\n                        border-radius: 0;\n                        opacity: 0;\n                        transform: scale(0.6);\n                        & .mark {\n                            transform-origin: center;\n                            transform: scaleY(-1) translate(-3px, 11px) rotate(45deg); \n                        }\n                        & .short {\n                            width: 4px;\n                            height: 12px;\n                        }\n                        & .long {\n                            width: 0;\n                            height: 4px;\n                        }\n                    }\n                }\n            }\n            & .${_}-text {\n                user-select: none;\n                display: inline-flex;\n                justify-content: center;\n                align-items: center;\n            }\n            &:has(\\.${_}-element:not(:disabled)) {\n                & .${_}  {\n                    &:hover {\n                        &::before {\n                            opacity: ${hoverOpacity};\n                        }\n                    }\n                    &:active, &.clicked {\n                        &::before {\n                            opacity: ${activeOpacity};\n                        }\n                    }\n                }\n            }\n            &:has(\\.${_}-element:focus-visible) {\n                & .${_} {\n                    & .${_}-inner  {\n                        outline-width: 2px;\n                    }\n                }\n            }\n            &:has(\\.${_}-element:checked) {\n                & .${_} .${_}-inner {\n                    border-color: transparent;\n                    background: ${backgroundChecked};\n                    & svg {\n                        opacity: 1;\n                        transform: scale(1);\n                        transition: \n                            opacity 150ms ease 0ms,\n                            transform 150ms cubic-bezier(0.3, 0, 0.8, 0.15) 0ms;\n                        & .short {\n                            transition: \n                                transform 150ms cubic-bezier(0.3, 0, 0.8, 0.15) 0ms,\n                                height 150ms cubic-bezier(0.3, 0, 0.8, 0.15) 0ms;\n                        }\n                        & .long {\n                            transition: \n                                transform 150ms cubic-bezier(0.3, 0, 0.8, 0.15) 0ms,\n                                width 150ms cubic-bezier(0.3, 0, 0.8, 0.15) 0ms;\n                            width: 20px;\n                        }\n                    }\n                }\n            }\n            &.${_}-indeterminate {\n                & .${_} .${_}-inner {\n                    border-color: transparent;\n                    background: ${backgroundChecked};\n                    & svg {\n                        opacity: 1;\n                        transform: scale(1);\n                        transition: \n                                opacity 150ms ease 0ms,\n                                transform 150ms cubic-bezier(0.3, 0, 0.8, 0.15) 0ms;\n                        & .mark {\n                            transform: scaleY(-1) translate(4px, 12px) rotate(0deg); \n                        }\n                        & .short {\n                            width: 4px;\n                            height: 4px;\n                        }\n                        & .long {\n                            width: 20px;\n                            height: 4px;\n                        }\n                    }\n                }\n            }\n            &:has(\\.${_}-element:disabled) {\n                opacity: .5;\n                & .${_} {\n                    cursor: default;\n                }\n            }\n        `\n    }}\n     ${props => {\n        return mergeStyleOverrides('TuiCheckbox', props.$options)\n    }}\n`\n","import styled, { css } from 'styled-components'\nimport { RadioOptionsProps } from './Radio.types'\nimport theme, { mergeStyleOverrides, ColorTone, ColorVariant } from '@/style'\n\nexport const StyledRadio = styled.label<{ $options: RadioOptionsProps }>`\n    ${props => {\n        const options = props.$options\n        const { prefixClass: _, variant, outlined, color, size, shape } = options\n\n        let baseSize = 8\n        let textFontSize = 14\n        let iconFontSize = 12\n        //按照尺寸定义变量\n        switch (size) {\n            case 'xs':\n                baseSize = 6\n                textFontSize = 11\n                iconFontSize = baseSize * 2\n                break\n            case 'sm':\n                baseSize = 7\n                textFontSize = 12\n                iconFontSize = baseSize * 2\n                break\n            case 'md':\n                baseSize = 8\n                textFontSize = 14\n                iconFontSize = baseSize * 2\n                break\n            case 'lg':\n                baseSize = 9\n                textFontSize = 14\n                iconFontSize = baseSize * 2\n                break\n            case 'xl':\n                baseSize = 10\n                textFontSize = 16\n                iconFontSize = baseSize * 2\n                break\n        }\n\n        let palette = theme.vars.palette[color!] as ColorTone & ColorVariant\n        if (palette === undefined) {\n            palette = theme.vars.palette.primary\n        }\n        let outlineColor = color === 'neutral' ? theme.vars.palette.primary.main : palette.main\n        let borderColor = outlined ?\n            variant === 'filled' ? palette.dark : palette.container\n            : 'transparent'\n\n        let foreColor, background, backgroundRipple,\n            hoverOpacity, activeOpacity, foreColorChecked, backgroundChecked\n\n        foreColor = theme.vars.palette.surface.onDark\n\n        switch (variant) {\n            case 'filled':\n                background = palette.main\n                backgroundRipple = palette.onContainer\n                hoverOpacity = 0.2\n                activeOpacity = 0.3\n                backgroundChecked = palette.main\n                foreColorChecked = palette.onMain\n                break\n            case 'tonal':\n                background = palette.light\n                backgroundRipple = palette.main\n                hoverOpacity = 0.1\n                activeOpacity = 0.2\n                backgroundChecked = palette.container\n                foreColorChecked = palette.onContainer\n                break\n            case 'text':\n            default:\n                background = \"none\"\n                backgroundRipple = palette.main\n                hoverOpacity = 0.1\n                activeOpacity = 0.2\n                backgroundChecked = palette.light\n                foreColorChecked = palette.onLight\n                break\n        }\n\n        return css`\n            --Radio-baseSize: ${baseSize};\n            --Icon-fontSize: ${iconFontSize};\n            --Text-fontSize: ${textFontSize};\n            font-family: var(--Radio-fontFamily, ${theme.vars.fontFamily.body});\n            font-size: calc(var(--Text-fontSize) * 1px);\n            line-height: ${theme.vars.lineHeight.md};\n            margin-inline-start: var(--Radio-marginInlineStart);\n            margin-inline-end: var(--Radio-marginInlineEnd);\n            box-sizing: border-box;\n            position: relative;\n            display: inline-flex;\n            vertical-align: middle;\n            align-items: center;\n            color: ${foreColor};\n            transition: \n                opacity 150ms ease 0ms, \n                border-color 150ms ease 0ms, \n                background-color ease 0ms, \n                outline 150ms ease 0ms,\n                box-shadow 150ms ease 0ms;\n            & .${_}-action{\n                position: absolute;\n                inset: 0;\n                & .${_}-element {\n                    cursor: pointer;\n                    position: absolute;\n                    margin: 0;\n                    outline: 0;\n                    opacity: 0; \n                    width: 100%;\n                    height: 100%;\n                    &:disabled {\n                        cursor: default;\n                    }\n                } \n            }\n            & svg {\n                user-select: none;\n                width: 1em;\n                height: 1em;\n                fill: currentColor;\n                font-size: calc(var(--Icon-fontSize) * 1px);\n            }\n            & .${_} {\n                position: relative;\n                cursor: pointer;\n                width: var(--Radio-minWidth, calc(var(--Radio-baseSize) * 4px));\n                height: var(--Radio-minHeight, calc(var(--Radio-baseSize) * 4px));\n                border-radius: calc(var(--Radio-baseSize) * 2px);\n                display: inline-flex;\n                justify-content: center;\n                align-items: center;\n                flex-shrink: 0;\n                &::before {\n                    content: \"\";     \n                    position: absolute;      \n                    border-radius: inherit; \n                    pointer-events: none;\n                    background: ${backgroundRipple};\n                    inset: 0;\n                    opacity: 0;            \n                    transition: opacity 150ms ease 0ms; \n                }\n                & .${_}-inner {\n                    width: var(--Radio-inner-minWidth, calc(var(--Radio-baseSize) * 2px + 2px));\n                    height: var(--Radio-inner-minHeight, calc(var(--Radio-baseSize) * 2px + 2px));\n                    ${shape === 'round' ? css`\n                        border-radius: var(--Radio-radius, calc(var(--Radio-baseSize) * 2px));\n                    `: css`\n                        border-radius: var(--Radio-radius, ${theme.vars.radius.sm});\n                    `}\n                        background: var(--Radio-background, ${background}); \n                    box-sizing: border-box;\n                    border-width: 2px;\n                    border-style: solid;\n                    border-color: var(--Radio-borderColor, ${borderColor});\n                    outline-offset: var(--Radio-outlineOffset, 1px);\n                    outline-color: ${outlineColor};\n                    outline-width: 0px;\n                    outline-style: solid;\n                    display: flex;\n                    transition: \n                        opacity 150ms ease 0ms,\n                        background-color 150ms ease 0ms,\n                        outline-width 250ms cubic-bezier(0, 0, 0, 3) 0ms;\n                    & svg {\n                        fill: ${foreColorChecked};\n                        z-index: 1;\n                        width: 100%;\n                        height: 100%;\n                        overflow: visible;\n                        border-radius: 0;\n                        opacity: 0;\n                        transform: scale(0.6);\n                    }\n                }\n                \n            }\n            & .${_}-text {\n                user-select: none;\n                display: inline-flex;\n                justify-content: center;\n                align-items: center;\n            }\n            &:has(\\.${_}-element:not(:disabled)) {\n                & .${_}  {\n                    &:hover {\n                        &::before {\n                            opacity: ${hoverOpacity};\n                        }\n                    }\n                    &:active, &.clicked {\n                        &::before {\n                            opacity: ${activeOpacity};\n                        }\n                    }\n                }\n            }\n            &:has(\\.${_}-element:focus-visible) {\n                & .${_} {\n                    & .${_}-inner  {\n                        outline-width: 2px;\n                    }\n                }\n            }\n            &:has(\\.${_}-element:checked) {\n                & .${_} {\n                    & .${_}-inner {\n                        border-color: transparent;\n                        background: ${backgroundChecked};\n                        & svg {\n                            opacity: 1;\n                            transform: scale(1);\n                            transition: \n                                opacity 150ms ease 0ms,\n                                transform 150ms cubic-bezier(0.3, 0, 0.8, 0.15) 0ms;\n                        }\n                    }\n                }\n            }\n            &:has(\\.${_}-element:disabled) {\n                opacity: .5;\n                & .${_} {\n                    cursor: default;\n                }\n            }\n        `\n    }}\n     ${props => {\n        return mergeStyleOverrides('TuiRadio', props.$options)\n    }}\n`\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\nimport { ControlLabelProps, ControlLabelOptionsProps } from './Control.types'\nimport styled, { css } from 'styled-components'\nimport theme, { mergeStyleOverrides } from '@/style'\nimport ControlContext from './ControlContext';\nimport { mergeProps } from '@/helper/common';\n\nconst StyledControlLabel = styled.label<{ $options: ControlLabelOptionsProps }>`\n    ${props => {\n        const options = props.$options\n        const { prefixClass: _, size } = options\n\n        let baseSize = 8\n        let textFontSize = 14\n        let iconFontSize = 12\n        //按照尺寸定义变量\n        switch (size) {\n            case 'xs':\n                baseSize = 6\n                textFontSize = 11\n                iconFontSize = baseSize * 2\n                break\n            case 'sm':\n                baseSize = 7\n                textFontSize = 12\n                iconFontSize = baseSize * 2\n                break\n            case 'md':\n                baseSize = 8\n                textFontSize = 14\n                iconFontSize = baseSize * 2\n                break\n            case 'lg':\n                baseSize = 9\n                textFontSize = 14\n                iconFontSize = baseSize * 2\n                break\n            case 'xl':\n                baseSize = 10\n                textFontSize = 16\n                iconFontSize = baseSize * 2\n                break\n        }\n        return css`\n            --ControlLabel-baseSize: ${baseSize};\n            --Icon-fontSize: ${iconFontSize};\n            --Text-fontSize: ${textFontSize};\n            font-family: var(--ControlLabel-fontFamily, ${theme.vars.fontFamily.body});\n            font-size: calc(var(--Text-fontSize) * 1px);\n            line-height: var(--ControlLabel-lineHeight, calc(var(--ControlLabel-baseSize) * 4px));\n            display: inline-flex;\n            gap: 4px;\n            align-items: center;\n            & .${_}-symbol {\n                color: ${theme.vars.palette.danger.main};\n            }\n            & .${_}-tooltip {\n                cursor: pointer;\n            }\n        `\n    }}\n    ${props => {\n        return mergeStyleOverrides('TuiControlLabel', props.$options)\n    }}\n`\nconst ControlLabel = (inProps: ControlLabelProps) => {\n    const ctx = useContext(ControlContext)\n    const props = mergeProps(ctx, inProps, {\n        prefixClass: 'tui-controllabel',\n        size: 'md',\n    }) as ControlLabelProps\n\n    const {\n        prefixClass,\n        className,\n        children,\n        required,\n        size,\n        ...rest\n    } = props\n\n    const classNames = classnames(\n        prefixClass,\n        className,\n    )\n\n    return <StyledControlLabel\n        $options={props}\n        className={classNames}\n        {...rest}>{required ? <span className={prefixClass + '-symbol'}>*</span> : null}{children}</StyledControlLabel >\n}\n\nexport default ControlLabel"],"names":[],"sourceRoot":""}