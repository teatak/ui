{"version":3,"file":"stories-themes-Theme-stories.c8c1140a.iframe.bundle.js","mappings":";AAKA;;AAMA;AACA;AACA;AAEA;AAKA;;;;;;AAgBA;AACA;;AAEA;AACA;;;;;;AAMA;;;AAGA;AACA;;;;;;;AAOA;;AAEA;AACA;AACA;;;AAIA;;;;;AAMA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;;AAEA;;;AAIA;;;;;;;;;;;;;AC9EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;;;AA4LA","sources":["webpack://@teatak/ui/./src/components/ButtonGroup/ButtonGroup.style.tsx","webpack://@teatak/ui/./src/stories/themes/Theme.stories.tsx"],"sourcesContent":["import styled, { css } from 'styled-components'\nimport { ButtonGroupOptionsProps } from './ButtonGroup.types'\nimport theme, { mergeStyleOverrides, ColorTone, ColorVariant } from '@/style'\n\nexport const StyledButtonGroup = styled.div<{ $options: ButtonGroupOptionsProps }>`\n    ${props => {\n        const options = props.$options\n        const _ = options.prefixClass\n        const direction = options.direction\n        return css`\n            display: flex;\n            flex-direction: ${direction};\n            ${groupBase(options)}\n        `\n    }}\n    ${props => {\n        return mergeStyleOverrides('TuiButtonGroup', props.$options)\n    }}\n`\n\nconst groupBase = (options: ButtonGroupOptionsProps) => {\n    const { prefixClass: _, direction, variant, color, outlined, elevation = [0, 0, 0] } = options\n    let palette = theme.vars.palette[color!] as ColorTone & ColorVariant\n    if (palette === undefined) {\n        palette = theme.vars.palette.neutral\n    }\n    let splitColor = variant === 'filled' ? `rgb(${palette[20]})` : `rgb(${palette[60]})`\n\n    switch (direction) {\n        case 'row':\n            return css`\n                align-items: center;\n                &>:first-child:not(:only-child) {\n                    border-start-end-radius: 0px;\n                    border-end-end-radius: 0px;\n                    &::after {\n                        border-color: ${splitColor};\n                        border-inline-start-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-inline-end-width: 1px;\n                        border-block-start-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-block-end-width: ${outlined ? \"1px\" : \"0px\"} ;\n                    }\n                }\n                &>:not(:first-child):not(:last-child):not(:only-child) {\n                    border-radius: 0px;\n                    &::after {\n                        border-color: ${splitColor};\n                        border-inline-start-width: 0px;\n                        border-inline-end-width: 1px;\n                        border-block-start-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-block-end-width: ${outlined ? \"1px\" : \"0px\"} ;\n                    }\n                }\n                &>:last-child:not(:only-child) {\n                    border-top-left-radius: 0px;\n                    border-bottom-left-radius: 0px;\n                    &::after {\n                        border-color: ${splitColor};\n                        border-inline-start-width: 0px;\n                        border-inline-end-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-block-start-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-block-end-width: ${outlined ? \"1px\" : \"0px\"} ;\n                    }\n                }\n            `\n        case 'column':\n            return css`\n                &>:first-child:not(:only-child) {\n                    border-end-start-radius: 0px;\n                    border-end-end-radius: 0px;\n                    &::after {\n                        border-color: ${splitColor};\n                        border-inline-start-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-inline-end-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-block-start-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-block-end-width: 1px ;\n                    }\n                }\n                &>:not(:first-child):not(:last-child):not(:only-child) {\n                    border-radius: 0px;\n                    &::after {\n                        border-color: ${splitColor};\n                        border-inline-start-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-inline-end-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-block-start-width: 0px;\n                        border-block-end-width: 1px;\n                    }\n                }\n                &>:last-child:not(:only-child) {\n                    border-top-right-radius: 0px;\n                    border-top-left-radius: 0px;\n                    &::after {\n                        border-color: ${splitColor};\n                        border-inline-start-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-inline-end-width: ${outlined ? \"1px\" : \"0px\"} ;\n                        border-block-start-width: 0px;\n                        border-block-end-width: ${outlined ? \"1px\" : \"0px\"} ;\n                    }\n                }\n            `\n        default:\n            return null\n    }\n}\n","import React, { useState } from 'react'\nimport type { Meta, StoryObj } from '@storybook/react-webpack5'\nimport { Button, Grid, GridItem, ButtonGroup } from '@/components'\nimport theme, { setMode, restoreMode, ColorTone, getMode, DefaultColorTones, DefaultColorTone, detectMode, ColorVariant, ColorName } from '@/style'\nimport styled from 'styled-components'\nimport Color from \"color\"\n\nconst StyledColorPalette = styled.div`\n  border-radius: 8px;\n  overflow: hidden;\n  &>div { \n    color: var(--tui-text-primary);\n    font-size: 14px;\n    padding: 8px;\n    cursor: pointer;\n    transition: transform 0.2s;\n    display: flex;\n    justify-content: space-between;\n    height: 40px;\n  }\n`\n\nconst StyledColor = styled.div`\n  &:hover {\n    &>div>.color {\n      display: inline-block;\n    }\n  }\n  &>div {\n    color: var(--tui-text-primary);\n    font-size: 14px;\n    padding: 8px;\n    cursor: pointer;\n    transition: transform 0.2s;\n    display: flex;\n    justify-content: space-between;\n    & .text {\n    }\n    & .color {\n      display: none;\n      font-size: 12px;\n    }\n    &:hover {\n      transform: scale(1.05);\n    }\n    &:first-child {\n      border-radius: 8px 8px 0 0;\n    }\n    &:last-child {\n      border-radius: 0 0 8px 8px;\n    }\n    &:nth-child(n+12){\n      color: var(--tui-surface-inverseOnMain);\n    }\n  }\n`\n\nconst ColorPalette = (props: any) => {\n  const {\n    name,\n    colorMode = 'hex',\n  } = props\n  let p: Record<ColorName, ColorTone & ColorVariant> = theme.entries.colorSchemes.light\n  const mode = detectMode()\n  if (mode == 'dark') {\n    p = theme.entries.colorSchemes.dark\n  }\n\n  return <StyledColorPalette className=\"colors\" style={{ border: `solid 1px var(--tui-${name}-main)` }}>\n    <div style={{ color: `var(--tui-${name}-onDark)`, background: `var(--tui-${name}-dark)` }}>\n      <span className='text'>--tui-{name}-dark</span>\n    </div>\n    <div style={{ color: `var(--tui-${name}-dark)`, background: `var(--tui-${name}-onDark)` }}>\n      <span className='text'>--tui-{name}-onDark</span>\n    </div>\n    <div style={{ color: `var(--tui-${name}-onMain)`, background: `var(--tui-${name}-main)` }}>\n      <span className='text'>--tui-{name}-main</span>\n    </div>\n    <div style={{ color: `var(--tui-${name}-main)`, background: `var(--tui-${name}-onMain)` }}>\n      <span className='text'>--tui-{name}-onMain</span>\n    </div>\n    <div style={{ color: `var(--tui-${name}-onContainer)`, background: `var(--tui-${name}-container)` }}>\n      <span className='text'>--tui-{name}-container</span>\n    </div>\n    <div style={{ color: `var(--tui-${name}-container)`, background: `var(--tui-${name}-onContainer)` }}>\n      <span className='text'>--tui-{name}-onContainer</span>\n    </div>\n    <div style={{ color: `var(--tui-${name}-onLight)`, background: `var(--tui-${name}-light)` }}>\n      <span className='text'>--tui-{name}-light</span>\n    </div>\n    <div style={{ color: `var(--tui-${name}-light)`, background: `var(--tui-${name}-onLight)` }}>\n      <span className='text'>--tui-{name}-onLight</span>\n    </div>\n    {/* {DefaultColorTones.map((k, i) => {\n    return <div key={k} style={{ background: `rgb(var(--tui-${name}-${k}))` }}>\n      <span className='text'>--tui-{name}-{k}</span><span className='color'>{toColor(range[k as DefaultColorTone])}</span>\n    </div>\n  })} */}\n  </StyledColorPalette>\n}\n\nconst ColorRange = (props: any) => {\n  const {\n    name,\n    colorMode = 'hex',\n  } = props\n  let p: Record<ColorName, ColorTone & ColorVariant> = theme.entries.colorSchemes.light\n  const mode = detectMode()\n  if (mode == 'dark') {\n    p = theme.entries.colorSchemes.dark\n  }\n\n  let range = p[name as ColorName] as ColorTone\n\n  //@ts-ignore\n  function round(number, precision) {\n    //@ts-ignore\n    return Math.round(+number + \"e\" + precision) / Math.pow(10, precision);\n  }\n\n  function toColor(_color: string) {\n    let arr\n    const color = Color(\"rgb(\" + _color + \")\")\n    switch (colorMode) {\n      case 'rgb':\n        return color.rgb().string()\n      case 'hsl':\n        arr = color.hsl().array()\n        return \"hsv(\" + round(arr[0], 0) + ', ' + round(arr[1], 0) + '%, ' + round(arr[2], 0) + '%)'\n      case 'hsv':\n        arr = color.hsv().array()\n        return \"hsv(\" + round(arr[0], 0) + ', ' + round(arr[1], 0) + '%, ' + round(arr[2], 0) + '%)'\n      default:\n        return color.hex()\n    }\n  }\n\n\n  return range && <StyledColor className=\"colors\">\n    {DefaultColorTones.map((k, i) => {\n      return <div key={k} style={{ background: `rgb(var(--tui-${name}-${k}))` }}>\n        <span className='text'>--tui-{name}-{k}</span><span className='color'>{toColor(range[k as DefaultColorTone])}</span>\n      </div>\n    })}\n  </StyledColor>\n}\n\nconst StyleShadow = styled.div`\n  padding:16px;\n  border-radius: 8px;\n  text-align: center;\n`\nconst Themes = () => {\n  const [colorMode, setColorMode] = useState(\"rgb\")\n  const initMode = getMode()\n  const [themeMode, setThemeMode] = useState(initMode)\n  return <>\n    <Grid spacing={8}>\n      <ButtonGroup variant='text' outlined color='primary'>\n        <Button\n          variant={themeMode === 'system' ? 'filled' : 'text'}\n          onClick={() => {\n            setMode('system')\n            setThemeMode('system')\n          }} >System</Button>\n        <Button\n          variant={themeMode === 'light' ? 'filled' : 'text'}\n          onClick={() => {\n            setMode('light')\n            setThemeMode('light')\n          }} >Light</Button>\n        <Button\n          variant={themeMode === 'dark' ? 'filled' : 'text'}\n          onClick={() => {\n            setMode('dark')\n            setThemeMode('dark')\n          }} >Dark</Button>\n        <Button\n          onClick={() => {\n            restoreMode()\n            setThemeMode('system')\n          }} >Clear</Button>\n      </ButtonGroup>\n      <ButtonGroup variant='text' outlined color='primary'>\n        <Button\n          variant={colorMode === 'hex' ? 'filled' : 'text'}\n          onClick={() => {\n            setColorMode('hex')\n          }} >HEX</Button>\n        <Button\n          variant={colorMode === 'rgb' ? 'filled' : 'text'}\n          onClick={() => {\n            setColorMode('rgb')\n          }} >RGB</Button>\n        <Button\n          variant={colorMode === 'hsl' ? 'filled' : 'text'}\n          onClick={() => {\n            setColorMode('hsl')\n          }} >HSL</Button>\n        <Button\n          variant={colorMode === 'hsv' ? 'filled' : 'text'}\n          onClick={() => {\n            setColorMode('hsv')\n          }} >HSV</Button>\n      </ButtonGroup>\n    </Grid>\n    <Grid\n      columns={{ xs: 4, sm: 8, md: 12, lg: 16, xl: 20 }}\n      spacing={{ xs: 8, md: 12 }}\n    >\n      <GridItem span={{ xs: 4, sm: 8, md: 12, lg: 16, xl: 20 }}>\n        <Grid spacing={8} columns={{ xs: 4, sm: 8, md: 16 }}>\n          {Object.keys(theme.entries.shadow).map((k, i) => {\n            return <GridItem key={k} span={4}>\n              <StyleShadow style={{ boxShadow: \"var(--tui-shadow-\" + k + \")\" }}>shadow-{k}</StyleShadow>\n            </GridItem>\n          })}\n        </Grid>\n      </GridItem>\n      {Object.keys(theme.entries.color).map((k, i) => {\n        return <GridItem key={k} span={4}>\n          <ColorPalette name={k} colorMode={colorMode}></ColorPalette>\n        </GridItem>\n      })}\n      {Object.keys(theme.entries.color).map((k, i) => {\n        return <GridItem key={k} span={4}>\n          <ColorRange name={k} colorMode={colorMode}></ColorRange>\n        </GridItem>\n      })}\n    </Grid>\n  </>\n}\n\nconst meta = {\n  title: 'Themes/Themes',\n  component: Themes,\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '1em' }}>\n        <Story />\n      </div>\n    ),\n  ],\n} satisfies Meta<typeof Themes>\n\nexport default meta\ntype Story = StoryObj<typeof meta>\n\nexport const Overview: Story = {}"],"names":[],"sourceRoot":""}